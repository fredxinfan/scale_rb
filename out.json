{
  "magicNumber": 1635018093,
  "metadata": {
    "V14": {
      "lookup": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 1,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 32,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 2,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Primitive": "U8"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index",
                      "docs": [

                      ]
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": [

                      ]
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": [

                      ]
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": [

                      ]
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 4,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Primitive": "U32"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "drml_common_runtime",
                "impls",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "free_kton",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reserved_kton",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 6,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Primitive": "U128"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 8,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "operational",
                      "type": 8,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mandatory",
                      "type": 8,
                      "typeName": "T",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 8,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Primitive": "U64"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; /*«*/ 32 /*»*/]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 10,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 11,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 12,
                      "typeName": "Vec<DigestItem>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 12,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 13
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 13,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 14,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 4,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 15,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 16
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 16,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 17
                },
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 103,
                      "typeName": "Phase",
                      "docs": [

                      ]
                    },
                    {
                      "name": "event",
                      "type": 17,
                      "typeName": "E",
                      "docs": [

                      ]
                    },
                    {
                      "name": "topics",
                      "type": 90,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "pangoro_runtime",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 18,
                          "typeName": "frame_system::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 25,
                          "typeName": "darwinia_balances::Event<Runtime, darwinia_balances::Instance1>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Kton",
                      "fields": [
                        {
                          "name": null,
                          "type": 27,
                          "typeName": "darwinia_balances::Event<Runtime, darwinia_balances::Instance2>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ElectionProviderMultiPhase",
                      "fields": [
                        {
                          "name": null,
                          "type": 28,
                          "typeName": "pallet_election_provider_multi_phase::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Staking",
                      "fields": [
                        {
                          "name": null,
                          "type": 32,
                          "typeName": "darwinia_staking::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Offences",
                      "fields": [
                        {
                          "name": null,
                          "type": 33,
                          "typeName": "pallet_offences::Event",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "name": null,
                          "type": 35,
                          "typeName": "pallet_session::Event",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "name": null,
                          "type": 36,
                          "typeName": "pallet_grandpa::Event",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EcdsaAuthority",
                      "fields": [
                        {
                          "name": null,
                          "type": 41,
                          "typeName": "darwinia_ecdsa_authority::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ImOnline",
                      "fields": [
                        {
                          "name": null,
                          "type": 51,
                          "typeName": "pallet_im_online::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 60,
                          "typeName": "pallet_treasury::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": 61,
                          "typeName": "pallet_sudo::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 64,
                          "typeName": "pallet_scheduler::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgePangolinDispatch",
                      "fields": [
                        {
                          "name": null,
                          "type": 67,
                          "typeName": "pallet_bridge_dispatch::Event<Runtime, pallet_bridge_dispatch::Instance1\n>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgePangolinMessages",
                      "fields": [
                        {
                          "name": null,
                          "type": 72,
                          "typeName": "pallet_bridge_messages::Event<Runtime, pallet_bridge_messages::Instance1\n>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PangolinFeeMarket",
                      "fields": [
                        {
                          "name": null,
                          "type": 78,
                          "typeName": "pallet_fee_market::Event<Runtime, pallet_fee_market::Instance1>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TransactionPause",
                      "fields": [
                        {
                          "name": null,
                          "type": 87,
                          "typeName": "module_transaction_pause::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "darwinia_evm::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 91,
                          "typeName": "darwinia_ethereum::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BaseFee",
                      "fields": [
                        {
                          "name": null,
                          "type": 101,
                          "typeName": "pallet_base_fee::Event",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 31,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 18,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": null,
                          "type": 19,
                          "typeName": "DispatchInfo",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully. \\[info\\]"
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 22,
                          "typeName": "DispatchError",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 19,
                          "typeName": "DispatchInfo",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed. \\[error, info\\]"
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new \\[account\\] was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An \\[account\\] was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened. \\[origin, remark_hash\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchInfo"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "class",
                      "type": 20,
                      "typeName": "DispatchClass",
                      "docs": [

                      ]
                    },
                    {
                      "name": "pays_fee",
                      "type": 21,
                      "typeName": "Pays",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchClass"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Operational",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mandatory",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "Pays"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "No",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CannotLookup",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BadOrigin",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "name": "index",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        },
                        {
                          "name": "error",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ConsumerRemaining",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NoProviders",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "name": null,
                          "type": 23,
                          "typeName": "TokenError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "name": null,
                          "type": 24,
                          "typeName": "ArithmeticError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "WouldDie",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BelowMinimum",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CannotCreate",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnknownAsset",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unsupported",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "sp_runtime",
                "ArithmeticError"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Overflow",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DivisionByZero",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "destination_status",
                          "type": 26,
                          "typeName": "BalanceStatus",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited into the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "destination_status",
                          "type": 26,
                          "typeName": "BalanceStatus",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited into the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "SolutionStored",
                      "fields": [
                        {
                          "name": "election_compute",
                          "type": 29,
                          "typeName": "ElectionCompute",
                          "docs": [

                          ]
                        },
                        {
                          "name": "prev_ejected",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A solution was stored with the given compute.",
                        "",
                        "If the solution is signed, this means that it hasn't yet been processed. If the",
                        "solution is unsigned, this means that it has also been processed.",
                        "",
                        "The `bool` is `true` when a previous solution was ejected to make room for this one."
                      ]
                    },
                    {
                      "name": "ElectionFinalized",
                      "fields": [
                        {
                          "name": "election_compute",
                          "type": 31,
                          "typeName": "Option<ElectionCompute>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The election has been finalized, with `Some` of the given computation, or else if the",
                        "election failed, `None`."
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An account has been rewarded for their signed submission being finalized."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An account has been slashed for submitting an invalid signed submission."
                      ]
                    },
                    {
                      "name": "SignedPhaseStarted",
                      "fields": [
                        {
                          "name": "round",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The signed phase of the given round has started."
                      ]
                    },
                    {
                      "name": "UnsignedPhaseStarted",
                      "fields": [
                        {
                          "name": "round",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The unsigned phase of the given round has started."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "ElectionCompute"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "OnChain",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Signed",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unsigned",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Fallback",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Emergency",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 30,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Primitive": "Bool"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 29
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 29,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "darwinia_staking",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "EraPaid",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The era payout has been set; the first balance is the validator-payout; the second is",
                        "the remainder from the maximum amount of reward.",
                        "\\[era_index, validator_payout, remainder\\]"
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The nominator has been rewarded by this amount. \\[stash, amount\\]"
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "KtonBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "One validator (and its nominators) has been slashed by the given amount.",
                        "\\[validator, amount, amount\\]"
                      ]
                    },
                    {
                      "name": "OldSlashingReportDiscarded",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "SessionIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An old slashing report from a prior era was discarded because it could",
                        "not be processed. \\[session_index\\]"
                      ]
                    },
                    {
                      "name": "StakersElected",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "A new set of stakers was elected."
                      ]
                    },
                    {
                      "name": "RingBonded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "TsInMs",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "TsInMs",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An account has bonded this amount. \\[amount, start, end\\]",
                        "",
                        "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                        "it will not be emitted for staking rewards when they are added to stake."
                      ]
                    },
                    {
                      "name": "KtonBonded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "KtonBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An account has bonded this amount. \\[account, amount, start, end\\]",
                        "",
                        "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                        "it will not be emitted for staking rewards when they are added to stake."
                      ]
                    },
                    {
                      "name": "RingUnbonded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "An account has unbonded this amount. \\[amount\\]"
                      ]
                    },
                    {
                      "name": "KtonUnbonded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "KtonBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account has unbonded this amount. \\[account, amount\\]"
                      ]
                    },
                    {
                      "name": "Kicked",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A nominator has been kicked from a validator. \\[nominator, stash\\]"
                      ]
                    },
                    {
                      "name": "StakingElectionFailed",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "The election failed. No new era is planned."
                      ]
                    },
                    {
                      "name": "Chilled",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "An account has stopped participating as either a validator or nominator.",
                        "\\[stash\\]"
                      ]
                    },
                    {
                      "name": "PayoutStarted",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"
                      ]
                    },
                    {
                      "name": "DepositsClaimed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Someone claimed his deposits. \\[stash\\]"
                      ]
                    },
                    {
                      "name": "DepositsClaimedWithPunish",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "KtonBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Someone claimed his deposits with some *KTON*s punishment. \\[stash, forfeit\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 33,
            "type": {
              "path": [
                "pallet_offences",
                "pallet",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Offence",
                      "fields": [
                        {
                          "name": "kind",
                          "type": 34,
                          "typeName": "Kind",
                          "docs": [

                          ]
                        },
                        {
                          "name": "timeslot",
                          "type": 10,
                          "typeName": "OpaqueTimeSlot",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "There is an offence reported of the given `kind` happened at the `session_index` and",
                        "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                        "\\[kind, timeslot\\]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 34,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 16,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NewAuthorities",
                      "fields": [
                        {
                          "name": "authority_set",
                          "type": 37,
                          "typeName": "AuthorityList",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New authority set has been applied."
                      ]
                    },
                    {
                      "name": "Paused",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Current authority set has been paused."
                      ]
                    },
                    {
                      "name": "Resumed",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Current authority set has been resumed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 37,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 38
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 38,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  39,
                  8
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 40,
                      "typeName": "/*«*/ ed25519::Public /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 41,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "CollectingAuthoritiesChangeSignatures",
                      "fields": [
                        {
                          "name": "message",
                          "type": 1,
                          "typeName": "Message",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authorities changed. Collecting authorities change signatures."
                      ]
                    },
                    {
                      "name": "CollectedEnoughAuthoritiesChangeSignatures",
                      "fields": [
                        {
                          "name": "operation",
                          "type": 42,
                          "typeName": "Operation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new_threshold",
                          "type": 45,
                          "typeName": "Option<u32>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "message",
                          "type": 1,
                          "typeName": "Message",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signatures",
                          "type": 46,
                          "typeName": "Vec<(Address, Signature)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Collected enough authorities change signatures."
                      ]
                    },
                    {
                      "name": "CollectingNewMessageRootSignatures",
                      "fields": [
                        {
                          "name": "message",
                          "type": 1,
                          "typeName": "Message",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "New message root found. Collecting new message root signatures."
                      ]
                    },
                    {
                      "name": "CollectedEnoughNewMessageRootSignatures",
                      "fields": [
                        {
                          "name": "commitment",
                          "type": 50,
                          "typeName": "Commitment",
                          "docs": [

                          ]
                        },
                        {
                          "name": "message",
                          "type": 1,
                          "typeName": "Message",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signatures",
                          "type": 46,
                          "typeName": "Vec<(Address, Signature)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Collected enough new message root signatures."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "primitives",
                "Operation"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "AddMember",
                      "fields": [
                        {
                          "name": "new",
                          "type": 43,
                          "typeName": "Address",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RemoveMember",
                      "fields": [
                        {
                          "name": "pre",
                          "type": 43,
                          "typeName": "Address",
                          "docs": [

                          ]
                        },
                        {
                          "name": "old",
                          "type": 43,
                          "typeName": "Address",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SwapMembers",
                      "fields": [
                        {
                          "name": "pre",
                          "type": 43,
                          "typeName": "Address",
                          "docs": [

                          ]
                        },
                        {
                          "name": "old",
                          "type": 43,
                          "typeName": "Address",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new",
                          "type": 43,
                          "typeName": "Address",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 43,
            "type": {
              "path": [
                "primitive_types",
                "H160"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "[u8; /*«*/ 20 /*»*/]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 44,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 20,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 46,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 47
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 47,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  43,
                  48
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 49,
                      "typeName": "[u8; 65]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 49,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 65,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "primitives",
                "Commitment"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "message_root",
                      "type": 9,
                      "typeName": "Hash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 51,
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "HeartbeatReceived",
                      "fields": [
                        {
                          "name": "authority_id",
                          "type": 52,
                          "typeName": "T::AuthorityId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new heartbeat was received from `AuthorityId`."
                      ]
                    },
                    {
                      "name": "AllGood",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "At the end of the session, no offence was committed."
                      ]
                    },
                    {
                      "name": "SomeOffline",
                      "fields": [
                        {
                          "name": "offline",
                          "type": 54,
                          "typeName": "Vec<IdentificationTuple<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "At the end of the session, at least one validator was found to be offline."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "pallet_im_online",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "/*«*/ sr25519::Public /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 54,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 55
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 55,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  0,
                  56
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "Exposure"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                account_info
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "KtonBalance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "own_ring_balance",
                      "type": 57,
                      "typeName": "RingBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "own_kton_balance",
                      "type": 57,
                      "typeName": "KtonBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "own_power",
                      "type": 4,
                      "typeName": "Power",
                      "docs": [

                      ]
                    },
                    {
                      "name": "total_power",
                      "type": 4,
                      "typeName": "Power",
                      "docs": [

                      ]
                    },
                    {
                      "name": "others",
                      "type": 58,
                      "typeName": "Vec<IndividualExposure<AccountId, RingBalance, KtonBalance>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 57,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Compact": {
                  "type": 6
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 58,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 59
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "IndividualExposure"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "KtonBalance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "ring_balance",
                      "type": 57,
                      "typeName": "RingBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "kton_balance",
                      "type": 57,
                      "typeName": "KtonBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "power",
                      "type": 4,
                      "typeName": "Power",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 60,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New proposal. \\[proposal_index\\]"
                      ]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "We have ended a spend period and will now allocate funds. \\[budget_remaining\\]"
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some funds have been allocated. \\[proposal_index, award, beneficiary\\]"
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proposal was rejected; funds were slashed. \\[proposal_index, slashed\\]"
                      ]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some of our funds have been burnt. \\[burn\\]"
                      ]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend.",
                        "\\[budget_remaining\\]"
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some funds have been deposited. \\[deposit\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 61,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 62,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "new_sudoer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The \\[sudoer\\] just switched identity; the old key is supplied."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 62,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 63
                },
                {
                  "name": "E",
                  "type": 22
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "name": null,
                          "type": 63,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "name": null,
                          "type": 22,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 63,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [

                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 64,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Scheduled some task. \\[when, index\\]"
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Canceled some task. \\[when, index\\]"
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": null,
                          "type": 65,
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 66,
                          "typeName": "Option<Vec<u8>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 62,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatched some task. \\[task, id, result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 65,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  4,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 66,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "pallet_bridge_dispatch",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "MessageRejected",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 68,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Message has been rejected before reaching dispatch."
                      ]
                    },
                    {
                      "name": "MessageVersionSpecMismatch",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 68,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "SpecVersion",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "SpecVersion",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Message has been rejected by dispatcher because of spec version mismatch.",
                        "Last two arguments are: expected and passed spec version."
                      ]
                    },
                    {
                      "name": "MessageWeightMismatch",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 68,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Message has been rejected by dispatcher because of weight mismatch.",
                        "Last two arguments are: expected and passed call weight."
                      ]
                    },
                    {
                      "name": "MessageSignatureMismatch",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 68,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Message signature mismatch."
                      ]
                    },
                    {
                      "name": "MessageCallDecodeFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 68,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "We have failed to decode Call from the message."
                      ]
                    },
                    {
                      "name": "MessageCallValidateFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 68,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 69,
                          "typeName": "TransactionValidityError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The call from the message has been rejected by the call validator."
                      ]
                    },
                    {
                      "name": "MessageDispatchPaymentFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 68,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The origin account has failed to pay fee for dispatching the message."
                      ]
                    },
                    {
                      "name": "MessageDispatched",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 68,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 62,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Message has been dispatched with given result."
                      ]
                    },
                    {
                      "name": "_Dummy",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Phantom member, never used. Needed to handle multiple pallet instances."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 68,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  14,
                  8
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "TransactionValidityError"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Invalid",
                      "fields": [
                        {
                          "name": null,
                          "type": 70,
                          "typeName": "InvalidTransaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unknown",
                      "fields": [
                        {
                          "name": null,
                          "type": 71,
                          "typeName": "UnknownTransaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "InvalidTransaction"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Payment",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Future",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Stale",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BadProof",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AncientBirthBlock",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExhaustsResources",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Custom",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BadMandatory",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MandatoryDispatch",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "UnknownTransaction"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "CannotLookup",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NoUnsignedValidator",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Custom",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "pallet_bridge_messages",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "ParameterUpdated",
                      "fields": [
                        {
                          "name": null,
                          "type": 73,
                          "typeName": "T::Parameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Pallet parameter has been updated."
                      ]
                    },
                    {
                      "name": "MessageAccepted",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Message has been accepted and is waiting to be delivered."
                      ]
                    },
                    {
                      "name": "MessagesDelivered",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 75,
                          "typeName": "DeliveredMessages",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Messages in the inclusive range have been delivered to the bridged chain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "pangoro_runtime",
                "bridges_message",
                "pangolin",
                "PangoroToPangolinMessagesParameter"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "PangolinToPangoroConversionRate",
                      "fields": [
                        {
                          "name": null,
                          "type": 74,
                          "typeName": "FixedU128",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "/*«*/ u128 /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "bp_messages",
                "DeliveredMessages"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "begin",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "end",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "dispatch_results",
                      "type": 76,
                      "typeName": "DispatchResultsBitVec",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 76,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "BitSequence": {
                  "bitStoreType": 2,
                  "bitOrderType": 77
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 77,
            "type": {
              "path": [
                "bitvec",
                "order",
                "Msb0"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "pallet_fee_market",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Enroll",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Relayer enrollment. \\[account_id, locked_collateral, relay_fee\\]"
                      ]
                    },
                    {
                      "name": "UpdateLockedCollateral",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Update relayer locked collateral. \\[account_id, new_collateral\\]"
                      ]
                    },
                    {
                      "name": "UpdateRelayFee",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Update relayer fee. \\[account_id, new_fee\\]"
                      ]
                    },
                    {
                      "name": "CancelEnrollment",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Relayer cancel enrollment. \\[account_id\\]"
                      ]
                    },
                    {
                      "name": "UpdateCollateralSlashProtect",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Update collateral slash protect value. \\[slash_protect_value\\]"
                      ]
                    },
                    {
                      "name": "UpdateAssignedRelayersNumber",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Update market assigned relayers numbers. \\[new_assigned_relayers_number\\]"
                      ]
                    },
                    {
                      "name": "FeeMarketSlash",
                      "fields": [
                        {
                          "name": null,
                          "type": 79,
                          "typeName": "SlashReport<T::AccountId, T::BlockNumber, BalanceOf<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Slash report"
                      ]
                    },
                    {
                      "name": "OrderCreated",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 80,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 45,
                          "typeName": "Option<T::BlockNumber>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Create new order. \\[lane_id, message_nonce, order_fee, assigned_relayers,",
                        "out_of_slots_time\\]"
                      ]
                    },
                    {
                      "name": "OrderReward",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 81,
                          "typeName": "RewardItem<T::AccountId, BalanceOf<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Reward distribute of the order. \\[lane_id, message_nonce, rewards\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "pallet_fee_market",
                "types",
                "SlashReport"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "lane",
                      "type": 14,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "message",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "sent_time",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "confirm_time",
                      "type": 45,
                      "typeName": "Option<BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "delay_time",
                      "type": 45,
                      "typeName": "Option<BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "account_id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 80,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 0
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "pallet_fee_market",
                "s2s",
                "payment",
                "RewardItem"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "to_assigned_relayers",
                      "type": 82,
                      "typeName": "BTreeMap<AccountId, Balance>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "to_treasury",
                      "type": 85,
                      "typeName": "Option<Balance>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "to_message_relayer",
                      "type": 86,
                      "typeName": "Option<(AccountId, Balance)>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "to_confirm_relayer",
                      "type": 86,
                      "typeName": "Option<(AccountId, Balance)>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 83,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 83,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 84
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 84,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  0,
                  6
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 86,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 84
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 84,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "module_transaction_pause",
                "module",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "TransactionPaused",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Paused transaction . \\[pallet_name_bytes, function_name_bytes\\]"
                      ]
                    },
                    {
                      "name": "TransactionUnpaused",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Unpaused transaction . \\[pallet_name_bytes, function_name_bytes\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 88,
            "type": {
              "path": [
                "darwinia_evm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Log",
                      "fields": [
                        {
                          "name": "log",
                          "type": 89,
                          "typeName": "Log",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Ethereum events from contracts."
                      ]
                    },
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "address",
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A contract has been created at given."
                      ]
                    },
                    {
                      "name": "CreatedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A contract was attempted to be created, but the execution failed."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A contract has been executed successfully with states applied."
                      ]
                    },
                    {
                      "name": "ExecutedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A contract has been executed with errors. States are reverted with only gas fees",
                        "applied."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 89,
            "type": {
              "path": [
                "ethereum",
                "log",
                "Log"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 43,
                      "typeName": "H160",
                      "docs": [

                      ]
                    },
                    {
                      "name": "topics",
                      "type": 90,
                      "typeName": "Vec<H256>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 90,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 9
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "darwinia_ethereum",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "from",
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "transaction_hash",
                          "type": 9,
                          "typeName": "H256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "exit_reason",
                          "type": 92,
                          "typeName": "ExitReason",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An ethereum transaction was successfully executed."
                      ]
                    },
                    {
                      "name": "DVMTransfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "U256",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "DVM transfer."
                      ]
                    },
                    {
                      "name": "KtonDVMTransfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 99,
                          "typeName": "U256",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Kton transfer."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Ethereum pallet events."
              ]
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitReason"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Succeed",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "ExitSucceed",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "name": null,
                          "type": 94,
                          "typeName": "ExitError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Revert",
                      "fields": [
                        {
                          "name": null,
                          "type": 97,
                          "typeName": "ExitRevert",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Fatal",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "ExitFatal",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitSucceed"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Stopped",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Returned",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Suicided",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitError"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "StackUnderflow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "StackOverflow",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidJump",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidRange",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DesignatedInvalid",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CallTooDeep",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CreateCollision",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CreateContractLimit",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidCode",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "OutOfOffset",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "OutOfGas",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "OutOfFund",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PCUnderflow",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CreateEmpty",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Cow<'static, str>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 96
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 96,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 96,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Primitive": "Str"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitRevert"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Reverted",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitFatal"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NotSupported",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnhandledInterrupt",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CallErrorAsFatal",
                      "fields": [
                        {
                          "name": null,
                          "type": 94,
                          "typeName": "ExitError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Cow<'static, str>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "primitive_types",
                "U256"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "[u64; 4]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 100,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 4,
                  "type": 8
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "pallet_base_fee",
                "pallet",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NewBaseFeePerGas",
                      "fields": [
                        {
                          "name": null,
                          "type": 99,
                          "typeName": "U256",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BaseFeeOverflow",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "IsActive",
                      "fields": [
                        {
                          "name": null,
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NewElasticity",
                      "fields": [
                        {
                          "name": null,
                          "type": 102,
                          "typeName": "Permill",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 102,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "/*«*/ u32 /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Finalization",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Initialization",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 104,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 65
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 106,
                      "typeName": "codec::Compact<u32>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "spec_name",
                      "type": 96,
                      "typeName": "sp_runtime::RuntimeString",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 106,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Compact": {
                  "type": 4
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "fill_block",
                      "fields": [
                        {
                          "name": "ratio",
                          "type": 108,
                          "typeName": "Perbill",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A dispatch that will fill the block weight up to the given ratio."
                      ]
                    },
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 8,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 109,
                          "typeName": "Vec<KeyValue>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 111,
                          "typeName": "Vec<Key>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 10,
                          "typeName": "Key",
                          "docs": [

                          ]
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Make some on-chain remark and emit event.",
                        "",
                        "# <weight>",
                        "- `O(b)` where b is the length of the remark.",
                        "- 1 event.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "/*«*/ u32 /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 109,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 110
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 110,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  10,
                  10
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 111,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 10
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_block",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "per_class",
                      "type": 113,
                      "typeName": "PerDispatchClass<WeightsPerClass>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 114
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 114,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "operational",
                      "type": 114,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mandatory",
                      "type": 114,
                      "typeName": "T",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 115,
                      "typeName": "Option<Weight>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_total",
                      "type": 115,
                      "typeName": "Option<Weight>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reserved",
                      "type": 115,
                      "typeName": "Option<Weight>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 117,
                      "typeName": "PerDispatchClass<u32>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "RuntimeDbWeight"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "write",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 96,
                      "typeName": "RuntimeString",
                      "docs": [

                      ]
                    },
                    {
                      "name": "impl_name",
                      "type": 96,
                      "typeName": "RuntimeString",
                      "docs": [

                      ]
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "apis",
                      "type": 120,
                      "typeName": "ApisVec",
                      "docs": [

                      ]
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 121
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 121,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 121,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 122
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 122,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  123,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 123,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 8,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 124,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Primitive": "U16"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 127
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 129,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 127,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  128,
                  8
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "sp_consensus_babe",
                "app",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "/*«*/ sr25519::Public /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 129,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 127
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "sp_consensus_slots",
                "Slot"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "sp_consensus_babe",
                "digests",
                "NextConfigDescriptor"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": "c",
                          "type": 132,
                          "typeName": "(u64, u64)",
                          "docs": [

                          ]
                        },
                        {
                          "name": "allowed_slots",
                          "type": 133,
                          "typeName": "AllowedSlots",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 132,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  8,
                  8
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "sp_consensus_babe",
                "AllowedSlots"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "PrimarySlots",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PrimaryAndSecondaryPlainSlots",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PrimaryAndSecondaryVRFSlots",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 134,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 135,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 135,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 1
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "sp_consensus_babe",
                "BabeEpochConfiguration"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "c",
                      "type": 132,
                      "typeName": "(u64, u64)",
                      "docs": [

                      ]
                    },
                    {
                      "name": "allowed_slots",
                      "type": 133,
                      "typeName": "AllowedSlots",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 138,
            "type": {
              "path": [
                "pallet_babe",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 139,
                          "typeName": "Box<EquivocationProof<T::Header>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 142,
                          "typeName": "T::KeyOwnerProof",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report authority equivocation/misbehavior. This method will verify",
                        "the equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence will",
                        "be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 139,
                          "typeName": "Box<EquivocationProof<T::Header>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 142,
                          "typeName": "T::KeyOwnerProof",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report authority equivocation/misbehavior. This method will verify",
                        "the equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence will",
                        "be reported.",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "plan_config_change",
                      "fields": [
                        {
                          "name": "config",
                          "type": 131,
                          "typeName": "NextConfigDescriptor",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                        "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                        "Multiple calls to this method will replace any existing planned config change that had",
                        "not been enacted yet."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "sp_consensus_slots",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "Header",
                  "type": 140
                },
                {
                  "name": "Id",
                  "type": 128
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "offender",
                      "type": 128,
                      "typeName": "Id",
                      "docs": [

                      ]
                    },
                    {
                      "name": "slot",
                      "type": 130,
                      "typeName": "Slot",
                      "docs": [

                      ]
                    },
                    {
                      "name": "first_header",
                      "type": 140,
                      "typeName": "Header",
                      "docs": [

                      ]
                    },
                    {
                      "name": "second_header",
                      "type": 140,
                      "typeName": "Header",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 141
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 9,
                      "typeName": "Hash::Output",
                      "docs": [

                      ]
                    },
                    {
                      "name": "number",
                      "type": 106,
                      "typeName": "Number",
                      "docs": [

                      ]
                    },
                    {
                      "name": "state_root",
                      "type": 9,
                      "typeName": "Hash::Output",
                      "docs": [

                      ]
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 9,
                      "typeName": "Hash::Output",
                      "docs": [

                      ]
                    },
                    {
                      "name": "digest",
                      "type": 11,
                      "typeName": "Digest",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "sp_runtime",
                "traits",
                "BlakeTwo256"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "sp_session",
                "MembershipProof"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "session",
                      "type": 4,
                      "typeName": "SessionIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "trie_nodes",
                      "type": 111,
                      "typeName": "Vec<Vec<u8>>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "validator_count",
                      "type": 4,
                      "typeName": "ValidatorCount",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "pallet_babe",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InvalidEquivocationProof",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 145,
                          "typeName": "T::Moment",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 145,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Compact": {
                  "type": 8
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 147
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 149,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 123,
                      "typeName": "LockIdentifier",
                      "docs": [

                      ]
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reasons",
                      "type": 148,
                      "typeName": "Reasons",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Reasons"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Misc",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "All",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 149,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 147
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 150,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 151
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 152,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 151,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 123
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 123,
                      "typeName": "ReserveIdentifier",
                      "docs": [

                      ]
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 152,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 151
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Releases"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "V1_0_0",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V2_0_0",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 154,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 57,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "It will decrease the total issuance of the system by the `TransferFee`.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new_free",
                          "type": 57,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new_reserved",
                          "type": 57,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also decrease the total issuance of the system (`TotalIssuance`).",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 57,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 57,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "keep_alive",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 155,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 63
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 156,
                          "typeName": "AccountIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "name": null,
                          "type": 44,
                          "typeName": "[u8; 20]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 156,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Compact": {
                  "type": 63
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value."
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal."
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Balance too low to send value."
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit."
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account."
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account."
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist."
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    },
                    {
                      "name": "LockP",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Lock - POISONED."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 158,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 57,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "It will decrease the total issuance of the system by the `TransferFee`.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new_free",
                          "type": 57,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new_reserved",
                          "type": 57,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also decrease the total issuance of the system (`TotalIssuance`).",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 57,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 57,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "keep_alive",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 159,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value."
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal."
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Balance too low to send value."
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit."
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account."
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account."
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist."
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    },
                    {
                      "name": "LockP",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Lock - POISONED."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 160,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V2",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 161,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 162
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 162,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "WeightToFeeCoefficient"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "coeff_integer",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "coeff_frac",
                      "type": 108,
                      "typeName": "Perbill",
                      "docs": [

                      ]
                    },
                    {
                      "name": "negative",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    },
                    {
                      "name": "degree",
                      "type": 2,
                      "typeName": "u8",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 163,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 164
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "pallet_authorship",
                "UncleEntryItem"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Author",
                  "type": 0
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InclusionHeight",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Uncle",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 165,
                          "typeName": "Option<Author>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 165,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set_uncles",
                      "fields": [
                        {
                          "name": "new_uncles",
                          "type": 167,
                          "typeName": "Vec<T::Header>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Provide a set of uncles."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 167,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 140
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 168,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InvalidUncleParent",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The uncle parent not in the chain."
                      ]
                    },
                    {
                      "name": "UnclesAlreadySet",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Uncles already set in the block."
                      ]
                    },
                    {
                      "name": "TooManyUncles",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Too many uncles."
                      ]
                    },
                    {
                      "name": "GenesisUncle",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The uncle is genesis."
                      ]
                    },
                    {
                      "name": "TooHighUncle",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The uncle is too high in chain."
                      ]
                    },
                    {
                      "name": "UncleAlreadyIncluded",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The uncle is already included."
                      ]
                    },
                    {
                      "name": "OldUncle",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The uncle isn't recent enough to be included."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "Phase"
              ],
              "params": [
                {
                  "name": "Bn",
                  "type": 4
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Off",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Signed",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unsigned",
                      "fields": [
                        {
                          "name": null,
                          "type": 170,
                          "typeName": "(bool, Bn)",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Emergency",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 170,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  30,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "ReadySolution"
              ],
              "params": [
                {
                  "name": "A",
                  "type": 0
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "supports",
                      "type": 172,
                      "typeName": "Supports<A>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "score",
                      "type": 175,
                      "typeName": "ElectionScore",
                      "docs": [

                      ]
                    },
                    {
                      "name": "compute",
                      "type": 29,
                      "typeName": "ElectionCompute",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 172,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 173
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 173,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  0,
                  174
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "sp_npos_elections",
                "Support"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "ExtendedBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "voters",
                      "type": 83,
                      "typeName": "Vec<(AccountId, ExtendedBalance)>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 175,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 3,
                  "type": 6
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 176,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "RoundSnapshot"
              ],
              "params": [
                {
                  "name": "A",
                  "type": 0
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "voters",
                      "type": 177,
                      "typeName": "Vec<(A, VoteWeight, Vec<A>)>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "targets",
                      "type": 80,
                      "typeName": "Vec<A>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 177,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 178
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 178,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  0,
                  8,
                  80
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 179,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "SolutionOrSnapshotSize"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "voters",
                      "type": 106,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "targets",
                      "type": 106,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 180,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 175
                },
                {
                  "name": "V",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 181,
                      "typeName": "BTreeMap<K, V>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 175
                },
                {
                  "name": "V",
                  "type": 4
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 182,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 182,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 183
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 183,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  175,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "signed",
                "SignedSubmission"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Solution",
                  "type": 185
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "raw_solution",
                      "type": 236,
                      "typeName": "RawSolution<Solution>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reward",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 185,
            "type": {
              "path": [
                "pangoro_runtime",
                "pallets",
                "election_provider_multi_phase",
                "NposCompactSolution16"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "votes1",
                      "type": 186,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes2",
                      "type": 189,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes3",
                      "type": 194,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes4",
                      "type": 197,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes5",
                      "type": 200,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes6",
                      "type": 203,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes7",
                      "type": 206,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes8",
                      "type": 209,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes9",
                      "type": 212,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes10",
                      "type": 215,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes11",
                      "type": 218,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes12",
                      "type": 221,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes13",
                      "type": 224,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes14",
                      "type": 227,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes15",
                      "type": 230,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes16",
                      "type": 233,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 186,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 187
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 187,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 188,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Compact": {
                  "type": 124
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 189,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 190
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 190,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  191,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 191,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  188,
                  192
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 192,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Compact": {
                  "type": 193
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 193,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "PerU16"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 124,
                      "typeName": "/*«*/ u16 /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 194,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 195
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 195,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  196,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 196,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 2,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 197,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 198
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 198,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  199,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 199,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 3,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 200,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 201
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 201,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  202,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 202,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 4,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 203,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 204
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 204,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  205,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 205,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 5,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 206,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 207
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 207,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  208,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 208,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 6,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 209,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 210
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 210,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  211,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 211,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 7,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 212,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 213
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 213,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  214,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 214,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 8,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 215,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 216
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 216,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  217,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 217,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 9,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 218,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 219
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 219,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  220,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 220,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 10,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 221,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 222
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 222,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  223,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 223,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 11,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 224,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 225
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 225,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  226,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 226,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 12,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 227,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 228
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 228,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  229,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 229,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 13,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 230,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 231
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 231,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  232,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 232,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 14,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 233,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 234
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 234,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  106,
                  235,
                  188
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 235,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 15,
                  "type": 191
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "RawSolution"
              ],
              "params": [
                {
                  "name": "S",
                  "type": 185
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "solution",
                      "type": 185,
                      "typeName": "S",
                      "docs": [

                      ]
                    },
                    {
                      "name": "score",
                      "type": 175,
                      "typeName": "ElectionScore",
                      "docs": [

                      ]
                    },
                    {
                      "name": "round",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 237,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "submit_unsigned",
                      "fields": [
                        {
                          "name": "raw_solution",
                          "type": 236,
                          "typeName": "Box<RawSolution<SolutionOf<T>>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "witness",
                          "type": 179,
                          "typeName": "SolutionOrSnapshotSize",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Submit a solution for the unsigned phase.",
                        "",
                        "The dispatch origin fo this call must be __none__.",
                        "",
                        "This submission is checked on the fly. Moreover, this unsigned solution is only",
                        "validated when submitted to the pool from the **local** node. Effectively, this means",
                        "that only active validators can submit this transaction when authoring a block (similar",
                        "to an inherent).",
                        "",
                        "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
                        "panic if the solution submitted by the validator is invalid in any way, effectively",
                        "putting their authoring reward at risk.",
                        "",
                        "No deposit or reward is associated with this submission."
                      ]
                    },
                    {
                      "name": "set_minimum_untrusted_score",
                      "fields": [
                        {
                          "name": "maybe_next_score",
                          "type": 238,
                          "typeName": "Option<ElectionScore>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set a new value for `MinimumUntrustedScore`.",
                        "",
                        "Dispatch origin must be aligned with `T::ForceOrigin`.",
                        "",
                        "This check can be turned off by setting the value to `None`."
                      ]
                    },
                    {
                      "name": "set_emergency_election_result",
                      "fields": [
                        {
                          "name": "supports",
                          "type": 172,
                          "typeName": "Supports<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set a solution in the queue, to be handed out to the client of this pallet in the next",
                        "call to `ElectionProvider::elect`.",
                        "",
                        "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
                        "",
                        "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
                        "feasibility check itself can in principle cause the election process to fail (due to",
                        "memory/weight constrains)."
                      ]
                    },
                    {
                      "name": "submit",
                      "fields": [
                        {
                          "name": "raw_solution",
                          "type": 236,
                          "typeName": "Box<RawSolution<SolutionOf<T>>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "num_signed_submissions",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Submit a solution for the signed phase.",
                        "",
                        "The dispatch origin fo this call must be __signed__.",
                        "",
                        "The solution is potentially queued, based on the claimed score and processed at the end",
                        "of the signed phase.",
                        "",
                        "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
                        "might be rewarded, slashed, or get all or a part of the deposit back.",
                        "",
                        "# <weight>",
                        "Queue size must be provided as witness data.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 238,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 175
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 175,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 239,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "PreDispatchEarlySubmission",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Submission was too early."
                      ]
                    },
                    {
                      "name": "PreDispatchWrongWinnerCount",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Wrong number of winners presented."
                      ]
                    },
                    {
                      "name": "PreDispatchWeakSubmission",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Submission was too weak, score-wise."
                      ]
                    },
                    {
                      "name": "SignedQueueFull",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The queue was full, and the solution was not better than any of the existing ones."
                      ]
                    },
                    {
                      "name": "SignedCannotPayDeposit",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The origin failed to pay the deposit."
                      ]
                    },
                    {
                      "name": "SignedInvalidWitness",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Witness data to dispatchable is invalid."
                      ]
                    },
                    {
                      "name": "SignedTooMuchWeight",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The signed submission consumes too much weight"
                      ]
                    },
                    {
                      "name": "OcwCallWrongEra",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "OCW submitted solution for wrong round"
                      ]
                    },
                    {
                      "name": "MissingSnapshotMetadata",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Snapshot metadata should exist but didn't."
                      ]
                    },
                    {
                      "name": "InvalidSubmissionIndex",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "`Self::insert_submission` returned an invalid index."
                      ]
                    },
                    {
                      "name": "CallNotAllowed",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "The call is not allowed at this point."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error of the pallet that can be returned in response to dispatches."
              ]
            }
          },
          {
            "id": 240,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "StakingLedger"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "KtonBalance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "active",
                      "type": 57,
                      "typeName": "RingBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "active_deposit_ring",
                      "type": 57,
                      "typeName": "RingBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "active_kton",
                      "type": 57,
                      "typeName": "KtonBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit_items",
                      "type": 241,
                      "typeName": "Vec<TimeDepositItem<RingBalance>>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "ring_staking_lock",
                      "type": 243,
                      "typeName": "StakingLock<RingBalance, BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "kton_staking_lock",
                      "type": 243,
                      "typeName": "StakingLock<KtonBalance, BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "claimed_rewards",
                      "type": 247,
                      "typeName": "Vec<EraIndex>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 241,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 242
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "TimeDepositItem"
              ],
              "params": [
                {
                  "name": "RingBalance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "value",
                      "type": 57,
                      "typeName": "RingBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "start_time",
                      "type": 145,
                      "typeName": "TsInMs",
                      "docs": [

                      ]
                    },
                    {
                      "name": "expire_time",
                      "type": 145,
                      "typeName": "TsInMs",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 243,
            "type": {
              "path": [
                "darwinia_support",
                "structs",
                "StakingLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Moment",
                  "type": 4
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "staking_amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "unbondings",
                      "type": 244,
                      "typeName": "WeakBoundedVec<Unbonding<Balance, Moment>, ConstU32<32>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 244,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 245
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 246,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 245,
            "type": {
              "path": [
                "darwinia_support",
                "structs",
                "Unbonding"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Moment",
                  "type": 4
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "until",
                      "type": 4,
                      "typeName": "Moment",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 246,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 245
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 247,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 4
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 248,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "RewardDestination"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Staked",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Stash",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Controller",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Account",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "ValidatorPrefs"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "commission",
                      "type": 250,
                      "typeName": "Perbill",
                      "docs": [

                      ]
                    },
                    {
                      "name": "blocked",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 250,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Compact": {
                  "type": 108
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 251,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "Nominations"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "targets",
                      "type": 80,
                      "typeName": "Vec<AccountId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "submitted_in",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "suppressed",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 252,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "ActiveEraInfo"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "start",
                      "type": 115,
                      "typeName": "Option<u64>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 253,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  4,
                  0
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 254,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "EraRewardPoints"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 4,
                      "typeName": "RewardPoint",
                      "docs": [

                      ]
                    },
                    {
                      "name": "individual",
                      "type": 255,
                      "typeName": "BTreeMap<AccountId, RewardPoint>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 255,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 4
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 256,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 256,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 257
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 257,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  0,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 258,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "Forcing"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NotForcing",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ForceNew",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ForceNone",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ForceAlways",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 259,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 260
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 260,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "UnappliedSlash"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "KtonBalance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "validator",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "own",
                      "type": 261,
                      "typeName": "slashing::RK<RingBalance, KtonBalance>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "others",
                      "type": 262,
                      "typeName": "Vec<(AccountId, slashing::RK<RingBalance, KtonBalance>)>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reporters",
                      "type": 80,
                      "typeName": "Vec<AccountId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "payout",
                      "type": 261,
                      "typeName": "slashing::RK<RingBalance, KtonBalance>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 261,
            "type": {
              "path": [
                "darwinia_staking",
                "slashing",
                "RK"
              ],
              "params": [
                {
                  "name": "R",
                  "type": 6
                },
                {
                  "name": "K",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "r",
                      "type": 6,
                      "typeName": "R",
                      "docs": [

                      ]
                    },
                    {
                      "name": "k",
                      "type": 6,
                      "typeName": "K",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 262,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 263
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 263,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  0,
                  261
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 264,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  108,
                  261
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "darwinia_staking",
                "slashing",
                "SlashingSpans"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "span_index",
                      "type": 4,
                      "typeName": "SpanIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "last_start",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "last_nonzero_slash",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "prior",
                      "type": 247,
                      "typeName": "Vec<EraIndex>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 266,
            "type": {
              "path": [
                "darwinia_staking",
                "slashing",
                "SpanRecord"
              ],
              "params": [
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "KtonBalance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "slashed",
                      "type": 261,
                      "typeName": "RK<RingBalance, KtonBalance>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "paid_out",
                      "type": 261,
                      "typeName": "RK<RingBalance, KtonBalance>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 267,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 268
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 268,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  4,
                  30
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 269,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "Releases"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "V1_0_0Ancient",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V2_0_0",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V3_0_0",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V4_0_0",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V5_0_0",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V6_0_0",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V7_0_0",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 270,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Percent"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 2,
                      "typeName": "/*«*/ u8 /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 271,
            "type": {
              "path": [
                "darwinia_staking",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "bond",
                      "fields": [
                        {
                          "name": "controller",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 272,
                          "typeName": "StakingBalanceT<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "payee",
                          "type": 248,
                          "typeName": "RewardDestination<AccountId<T>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "promise_month",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                        "be the account that controls it.",
                        "",
                        "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash account.",
                        "",
                        "Emits `Bonded`.",
                        "# <weight>",
                        "- Independent of the arguments. Moderate complexity.",
                        "- O(1).",
                        "- Three extra DB entries.",
                        "",
                        "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                        "unless the `origin` falls below _existential deposit_ and gets removed as dust.",
                        "------------------",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "bond_extra",
                      "fields": [
                        {
                          "name": "max_additional",
                          "type": 272,
                          "typeName": "StakingBalanceT<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "promise_month",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                        "for staking.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                        "",
                        "Use this if there are additional funds in your stash account that you wish to bond.",
                        "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
                        "any limitation on the amount that can be added.",
                        "",
                        "Emits `Bonded`.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "deposit_extra",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "promise_month",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Deposit some extra amount ring, and return kton to the controller.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                        "",
                        "Is a no-op if value to be deposited is zero.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- O(1).",
                        "- One DB entry.",
                        "------------",
                        "DB Weight:",
                        "- Read: Era Election Status, Bonded, Ledger, [Origin Account]",
                        "- Write: [Origin Account], Ledger",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unbond",
                      "fields": [
                        {
                          "name": "value",
                          "type": 272,
                          "typeName": "StakingBalanceT<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                        "period ends. If this leaves an amount actively bonded less than",
                        "T::Currency::minimum_balance(), then it is increased to the full amount.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "Once the unlock period is done, the funds will be withdrew automatically and ready for",
                        "transfer.",
                        "",
                        "No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
                        "can co-exists at the same time. In that case,  [`StakingLock::shrink`] need",
                        "to be called first to remove some of the chunks (if possible).",
                        "",
                        "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                        "they should call `chill` first in order to free up their bonded funds.",
                        "",
                        "After all pledged Ring and Kton are unbonded, the bonded accounts, namely stash and",
                        "controller, will also be unbonded.  Once user want to bond again, the `bond` method",
                        "should be called. If there are still pledged Ring or Kton and user want to bond more",
                        "values, the `bond_extra` method should be called."
                      ]
                    },
                    {
                      "name": "withdraw_unbonded",
                      "fields": [
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove any unlocked chunks from the `unlocking` queue from our management.",
                        "",
                        "This essentially frees up that balance to be used by the stash account to do",
                        "whatever it wants.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller.",
                        "",
                        "Emits `Withdrawn`.",
                        "",
                        "See also [`Call::unbond`].",
                        "",
                        "# <weight>",
                        "Complexity O(S) where S is the number of slashing spans to remove",
                        "NOTE: Weight annotation is the kill scenario, we refund otherwise.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "claim_mature_deposits",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Stash accounts can get their ring back after the depositing time exceeded,",
                        "and the ring getting back is still in staking status.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- One storage read.",
                        "- One storage write.",
                        "- Writes are limited to the `origin` account key.",
                        "----------",
                        "DB Weight:",
                        "- Read: Ledger, [Origin Account]",
                        "- Write: [Origin Account], Ledger",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "try_claim_deposits_with_punish",
                      "fields": [
                        {
                          "name": "expire_time",
                          "type": 8,
                          "typeName": "TsInMs",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Claim deposits while the depositing time has not been exceeded, the ring",
                        "will not be slashed, but the account is required to pay KTON as punish.",
                        "",
                        "Refer to https://talk.darwinia.network/topics/55",
                        "",
                        "Assume the `expire_time` is a unique ID for the deposit",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- One storage read.",
                        "- One storage write.",
                        "- Writes are limited to the `origin` account key.",
                        "----------",
                        "DB Weight:",
                        "- Read: Ledger, Locks, [Origin Account]",
                        "- Write: [Origin Account], Locks, Ledger",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "validate",
                      "fields": [
                        {
                          "name": "prefs",
                          "type": 249,
                          "typeName": "ValidatorPrefs",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Declare the desire to validate for the origin controller.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
                      ]
                    },
                    {
                      "name": "nominate",
                      "fields": [
                        {
                          "name": "targets",
                          "type": 273,
                          "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Declare the desire to nominate `targets` for the origin controller.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "# <weight>",
                        "- The transaction's complexity is proportional to the size of `targets` (N)",
                        "which is capped at CompactAssignments::LIMIT (MAX_NOMINATIONS).",
                        "- Both the reads and writes follow a similar pattern."
                      ]
                    },
                    {
                      "name": "chill",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Declare no desire to either validate or nominate.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains one read.",
                        "- Writes are limited to the `origin` account key.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_payee",
                      "fields": [
                        {
                          "name": "payee",
                          "type": 248,
                          "typeName": "RewardDestination<AccountId<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "(Re-)set the payment target for a controller.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains a limited number of reads.",
                        "- Writes are limited to the `origin` account key.",
                        "---------",
                        "- Weight: O(1)",
                        "- DB Weight:",
                        "    - Read: Ledger",
                        "    - Write: Payee",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_controller",
                      "fields": [
                        {
                          "name": "controller",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "(Re-)set the controller of a stash.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains a limited number of reads.",
                        "- Writes are limited to the `origin` account key.",
                        "----------",
                        "Weight: O(1)",
                        "DB Weight:",
                        "- Read: Bonded, Ledger New Controller, Ledger Old Controller",
                        "- Write: Bonded, Ledger New Controller, Ledger Old Controller",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_validator_count",
                      "fields": [
                        {
                          "name": "new",
                          "type": 106,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Sets the ideal number of validators.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "Write: Validator Count",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "increase_validator_count",
                      "fields": [
                        {
                          "name": "additional",
                          "type": 106,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Increments the ideal number of validators.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Same as [`Self::set_validator_count`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "scale_validator_count",
                      "fields": [
                        {
                          "name": "factor",
                          "type": 270,
                          "typeName": "Percent",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Scale up the ideal number of validators by a factor.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Same as [`Self::set_validator_count`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_no_eras",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "Force there to be no new eras indefinitely.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "Thus the election process may be ongoing when this is called. In this case the",
                        "election will continue until the next era is triggered.",
                        "",
                        "# <weight>",
                        "- No arguments.",
                        "- Weight: O(1)",
                        "- Write: ForceEra",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_new_era",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [
                        "Force there to be a new era at the end of the next session. After this, it will be",
                        "reset to normal (non-forced) behaviour.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "If this is called just before a new era is triggered, the election process may not",
                        "have enough blocks to get a result.",
                        "",
                        "# <weight>",
                        "- No arguments.",
                        "- Weight: O(1)",
                        "- Write ForceEra",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_invulnerables",
                      "fields": [
                        {
                          "name": "invulnerables",
                          "type": 80,
                          "typeName": "Vec<AccountId<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Set the validators who cannot be slashed (if any).",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "- O(V)",
                        "- Write: Invulnerables",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_unstake",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Force a current staker to become completely unstaked, immediately.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "O(S) where S is the number of slashing spans to be removed",
                        "Reads: Bonded, Slashing Spans, Account, Locks",
                        "Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators,",
                        "Account, Locks Writes Each: SpanSlash * S",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_new_era_always",
                      "fields": [

                      ],
                      "index": 19,
                      "docs": [
                        "Force there to be a new era at the end of sessions indefinitely.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "If this is called just before a new era is triggered, the election process may not",
                        "have enough blocks to get a result.",
                        "",
                        "# <weight>",
                        "- Weight: O(1)",
                        "- Write: ForceEra",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_deferred_slash",
                      "fields": [
                        {
                          "name": "era",
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "slash_indices",
                          "type": 247,
                          "typeName": "Vec<u32>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Cancel enactment of a deferred slash.",
                        "",
                        "Can be called by the `T::SlashCancelOrigin`.",
                        "",
                        "Parameters: era and indices of the slashes for that era to kill.",
                        "",
                        "# <weight>",
                        "Complexity: O(U + S)",
                        "with U unapplied slashes weighted with U=1000",
                        "and S is the number of slash indices to be canceled.",
                        "- Read: Unapplied Slashes",
                        "- Write: Unapplied Slashes",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "payout_stakers",
                      "fields": [
                        {
                          "name": "validator_stash",
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "era",
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Pay out all the stakers behind a single validator for a single era.",
                        "",
                        "- `validator_stash` is the stash account of the validator. Their nominators, up to",
                        "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                        "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                        "",
                        "The origin of this call must be _Signed_. Any account can call this function, even if",
                        "it is not one of the stakers.",
                        "",
                        "# <weight>",
                        "- Time complexity: at most O(MaxNominatorRewardedPerValidator).",
                        "- Contains a limited number of reads and writes.",
                        "-----------",
                        "N is the Number of payouts for the validator (including the validator)",
                        "Weight:",
                        "- Reward Destination Staked: O(N)",
                        "- Reward Destination Controller (Creating): O(N)",
                        "",
                        "  NOTE: weights are assuming that payouts are made to alive stash account (Staked).",
                        "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "rebond",
                      "fields": [
                        {
                          "name": "plan_to_rebond_ring",
                          "type": 57,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "plan_to_rebond_kton",
                          "type": 57,
                          "typeName": "KtonBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Rebond a portion of the stash scheduled to be unlocked.",
                        "",
                        "The dispatch origin must be signed by the controller.",
                        "",
                        "# <weight>",
                        "- Time complexity: O(L), where L is unlocking chunks",
                        "- Bounded by `MAX_UNLOCKING_CHUNKS`.",
                        "- Storage changes: Can't increase storage, only decrease it.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_history_depth",
                      "fields": [
                        {
                          "name": "new_history_depth",
                          "type": 106,
                          "typeName": "EraIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "era_items_deleted",
                          "type": 106,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Set `HistoryDepth` value. This function will delete any history information",
                        "when `HistoryDepth` is reduced.",
                        "",
                        "Parameters:",
                        "- `new_history_depth`: The new history depth you would like to set.",
                        "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This",
                        "  should report all the storage items that will be deleted by clearing old era history.",
                        "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an",
                        "  accurate number.",
                        "",
                        "Origin must be root.",
                        "",
                        "# <weight>",
                        "- E: Number of history depths removed, i.e. 10 -> 7 = 3",
                        "- Weight: O(E)",
                        "- DB Weight:",
                        "    - Reads: Current Era, History Depth",
                        "    - Writes: History Depth",
                        "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs",
                        "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,",
                        "      ErasStartSessionIndex",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reap_stash",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Remove all data structures concerning a staker/stash once it is at a state where it can",
                        "be considered `dust` in the staking system. The requirements are:",
                        "",
                        "1. the `total_balance` of the stash is below existential deposit.",
                        "2. or, the `ledger.total` of the stash is below existential deposit.",
                        "",
                        "The former can happen in cases like a slash; the latter when a fully unbonded account",
                        "is still receiving staking rewards in `RewardDestination::Staked`.",
                        "",
                        "It can be called by anyone, as long as `stash` meets the above requirements.",
                        "",
                        "Refunds the transaction fees upon successful execution."
                      ]
                    },
                    {
                      "name": "kick",
                      "fields": [
                        {
                          "name": "who",
                          "type": 273,
                          "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Remove the given nominations from the calling validator.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "- `who`: A list of nominator stash accounts who are nominating this validator which",
                        "  should no longer be nominating this validator.",
                        "",
                        "Note: Making this call only makes sense if you first set the validator preferences to",
                        "block any further nominations."
                      ]
                    },
                    {
                      "name": "set_staking_limits",
                      "fields": [
                        {
                          "name": "min_nominator_bond",
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "min_validator_bond",
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_nominator_count",
                          "type": 45,
                          "typeName": "Option<u32>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_validator_count",
                          "type": 45,
                          "typeName": "Option<u32>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "threshold",
                          "type": 274,
                          "typeName": "Option<Percent>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Update the various staking limits this pallet.",
                        "",
                        "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                        "* `min_validator_bond`: The minimum active bond needed to be a validator.",
                        "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
                        "  set to `None`, no limit is enforced.",
                        "* `max_validator_count`: The max number of users who can be a validator at once. When",
                        "  set to `None`, no limit is enforced.",
                        "",
                        "Origin must be Root to call this function.",
                        "",
                        "NOTE: Existing nominators and validators will not be affected by this update.",
                        "to kick people under the new limits, `chill_other` should be called."
                      ]
                    },
                    {
                      "name": "chill_other",
                      "fields": [
                        {
                          "name": "controller",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Declare a `controller` to stop participating as either a validator or nominator.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                        "",
                        "If the caller is the same as the controller being targeted, then no further checks are",
                        "enforced, and this function behaves just like `chill`.",
                        "",
                        "If the caller is different than the controller being targeted, the following conditions",
                        "must be met:",
                        "* A `ChillThreshold` must be set and checked which defines how close to the max",
                        "  nominators or validators we must reach before users can start chilling one-another.",
                        "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                        "  how close we are to the threshold.",
                        "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                        "  if this is a person that should be chilled because they have not met the threshold",
                        "  bond required.",
                        "",
                        "This can be helpful if bond requirements are updated, and we need to remove old users",
                        "who do not satisfy these requirements."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 272,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "StakingBalance"
              ],
              "params": [
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "KtonBalance",
                  "type": 6
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "RingBalance",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "KtonBalance",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "KtonBalance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 273,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 155
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 270
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 270,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 275,
            "type": {
              "path": [
                "darwinia_staking",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "NotController",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Not a controller account."
                      ]
                    },
                    {
                      "name": "NotStash",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Not a stash account."
                      ]
                    },
                    {
                      "name": "AlreadyBonded",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Stash is already bonded."
                      ]
                    },
                    {
                      "name": "AlreadyPaired",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Controller is already paired."
                      ]
                    },
                    {
                      "name": "EmptyTargets",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Targets cannot be empty."
                      ]
                    },
                    {
                      "name": "DuplicateIndex",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Duplicate index."
                      ]
                    },
                    {
                      "name": "InvalidSlashIndex",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Slash record index out of bounds."
                      ]
                    },
                    {
                      "name": "InsufficientBond",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Cannot have a validator or nominator role, with value less than the minimum defined by",
                        "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
                        "intention, `chill` first to remove one's role as validator/nominator."
                      ]
                    },
                    {
                      "name": "NoMoreChunks",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Can not schedule more unlock chunks."
                      ]
                    },
                    {
                      "name": "NoUnlockChunk",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Can not rebond without unlocking chunks."
                      ]
                    },
                    {
                      "name": "FundedTarget",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "Attempting to target a stash that still has funds."
                      ]
                    },
                    {
                      "name": "InvalidEraToReward",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "Invalid era to reward."
                      ]
                    },
                    {
                      "name": "InvalidNumberOfNominations",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "Invalid number of nominations."
                      ]
                    },
                    {
                      "name": "NotSortedAndUnique",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "Items are not sorted and unique."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "Rewards for this era have already been claimed for this validator."
                      ]
                    },
                    {
                      "name": "IncorrectHistoryDepth",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "Incorrect previous history depth input provided."
                      ]
                    },
                    {
                      "name": "IncorrectSlashingSpans",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [
                        "Incorrect number of slashing spans provided."
                      ]
                    },
                    {
                      "name": "BadState",
                      "fields": [

                      ],
                      "index": 17,
                      "docs": [
                        "Internal state has become somehow corrupted and the operation cannot continue."
                      ]
                    },
                    {
                      "name": "TooManyTargets",
                      "fields": [

                      ],
                      "index": 18,
                      "docs": [
                        "Too many nomination targets supplied."
                      ]
                    },
                    {
                      "name": "BadTarget",
                      "fields": [

                      ],
                      "index": 19,
                      "docs": [
                        "A nomination target was supplied that was blocked or otherwise not a validator."
                      ]
                    },
                    {
                      "name": "CannotChillOther",
                      "fields": [

                      ],
                      "index": 20,
                      "docs": [
                        "The user has enough bond and thus cannot be chilled forcefully by an external person."
                      ]
                    },
                    {
                      "name": "TooManyNominators",
                      "fields": [

                      ],
                      "index": 21,
                      "docs": [
                        "There are too many nominators in the system. Governance needs to adjust the staking",
                        "settings to keep things safe for the runtime."
                      ]
                    },
                    {
                      "name": "TooManyValidators",
                      "fields": [

                      ],
                      "index": 22,
                      "docs": [
                        "There are too many validators in the system. Governance needs to adjust the staking",
                        "settings to keep things safe for the runtime."
                      ]
                    },
                    {
                      "name": "PayoutIns",
                      "fields": [

                      ],
                      "index": 23,
                      "docs": [
                        "Payout - INSUFFICIENT"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 276,
            "type": {
              "path": [
                "sp_staking",
                "offence",
                "OffenceDetails"
              ],
              "params": [
                {
                  "name": "Reporter",
                  "type": 0
                },
                {
                  "name": "Offender",
                  "type": 55
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "offender",
                      "type": 55,
                      "typeName": "Offender",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reporters",
                      "type": 80,
                      "typeName": "Vec<Reporter>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 277,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  34,
                  10
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 278,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 279
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 279,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  0,
                  280
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 280,
            "type": {
              "path": [
                "pangoro_runtime",
                "pallets",
                "session",
                "SessionKeys"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "babe",
                      "type": 128,
                      "typeName": "</*«*/ Babe /*»*/ as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": [

                      ]
                    },
                    {
                      "name": "grandpa",
                      "type": 39,
                      "typeName": "</*«*/ Grandpa /*»*/ as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": [

                      ]
                    },
                    {
                      "name": "beefy",
                      "type": 281,
                      "typeName": "</*«*/ Beefy /*»*/ as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": [

                      ]
                    },
                    {
                      "name": "im_online",
                      "type": 52,
                      "typeName": "</*«*/ ImOnline /*»*/ as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": [

                      ]
                    },
                    {
                      "name": "authority_discovery",
                      "type": 284,
                      "typeName": "</*«*/ AuthorityDiscovery /*»*/ as $crate::BoundToRuntimeAppPublic>::\nPublic",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 281,
            "type": {
              "path": [
                "beefy_primitives",
                "crypto",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 282,
                      "typeName": "/*«*/ ecdsa::Public /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 282,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 283,
                      "typeName": "[u8; 33]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 283,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 33,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 284,
            "type": {
              "path": [
                "sp_authority_discovery",
                "app",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "/*«*/ sr25519::Public /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 285,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  286,
                  10
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 286,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "[u8; 4]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 287,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 280,
                          "typeName": "T::Keys",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proof",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                        "- DbWrites: `origin account`, `NextKeys`",
                        "- DbReads per key id: `KeyOwner`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                        "  of `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                        "- DbWrites: `NextKeys`, `origin account`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Invalid ownership proof."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "No associated validator ID for account."
                      ]
                    },
                    {
                      "name": "DuplicatedKey",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Registered duplicate key."
                      ]
                    },
                    {
                      "name": "NoKeys",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "No keys are associated with this account."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the session pallet."
              ]
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredState"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Live",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PendingPause",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Paused",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PendingResume",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 290,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredPendingChange"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "Limit",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "type": 4,
                      "typeName": "N",
                      "docs": [

                      ]
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "N",
                      "docs": [

                      ]
                    },
                    {
                      "name": "next_authorities",
                      "type": 291,
                      "typeName": "BoundedAuthorityList<Limit>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "forced",
                      "type": 45,
                      "typeName": "Option<N>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 291,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 38
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 37,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 292,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 293,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 304,
                          "typeName": "T::KeyOwnerProof",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 293,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 304,
                          "typeName": "T::KeyOwnerProof",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported.",
                        "",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "note_stalled",
                      "fields": [
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "best_finalized_block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Note that the current authority set of the GRANDPA finality gadget has",
                        "stalled. This will trigger a forced authority set change at the beginning",
                        "of the next session, to be enacted `delay` blocks after that. The delay",
                        "should be high enough to safely assume that the block signalling the",
                        "forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters",
                        "will start the new authority set using the given finalized block as base.",
                        "Only callable by root."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 293,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "set_id",
                      "type": 8,
                      "typeName": "SetId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "equivocation",
                      "type": 294,
                      "typeName": "Equivocation<H, N>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 294,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Prevote",
                      "fields": [
                        {
                          "name": null,
                          "type": 295,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Precommit",
                      "fields": [
                        {
                          "name": null,
                          "type": 301,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 295,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 39
                },
                {
                  "name": "V",
                  "type": 296
                },
                {
                  "name": "S",
                  "type": 297
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "identity",
                      "type": 39,
                      "typeName": "Id",
                      "docs": [

                      ]
                    },
                    {
                      "name": "first",
                      "type": 300,
                      "typeName": "(V, S)",
                      "docs": [

                      ]
                    },
                    {
                      "name": "second",
                      "type": 300,
                      "typeName": "(V, S)",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 296,
            "type": {
              "path": [
                "finality_grandpa",
                "Prevote"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H",
                      "docs": [

                      ]
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 297,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Signature"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 298,
                      "typeName": "/*«*/ ed25519::Signature /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 298,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 299,
                      "typeName": "[u8; 64]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 299,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 64,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 300,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  296,
                  297
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 301,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 39
                },
                {
                  "name": "V",
                  "type": 302
                },
                {
                  "name": "S",
                  "type": 297
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "identity",
                      "type": 39,
                      "typeName": "Id",
                      "docs": [

                      ]
                    },
                    {
                      "name": "first",
                      "type": 303,
                      "typeName": "(V, S)",
                      "docs": [

                      ]
                    },
                    {
                      "name": "second",
                      "type": 303,
                      "typeName": "(V, S)",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 302,
            "type": {
              "path": [
                "finality_grandpa",
                "Precommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H",
                      "docs": [

                      ]
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 303,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  302,
                  297
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 304,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 305,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "PauseFailed",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Attempt to signal GRANDPA pause when the authority set isn't live",
                        "(either paused or already pending pause)."
                      ]
                    },
                    {
                      "name": "ResumeFailed",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Attempt to signal GRANDPA resume when the authority set isn't paused",
                        "(either live or already pending resume)."
                      ]
                    },
                    {
                      "name": "ChangePending",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Attempt to signal GRANDPA change with one already pending."
                      ]
                    },
                    {
                      "name": "TooSoon",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Cannot signal forced change so soon after last."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidEquivocationProof",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 306,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 281
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 307,
            "type": {
              "path": [
                "darwinia_message_gadget",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set_commitment_contract",
                      "fields": [
                        {
                          "name": "commitment_contract",
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 308,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 43
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 309,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 309,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 43
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 310,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  42,
                  45,
                  1,
                  311
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 311,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 47
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 46,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 312,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  50,
                  1,
                  311
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 313,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  4,
                  9
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 314,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "add_authority",
                      "fields": [
                        {
                          "name": "new",
                          "type": 43,
                          "typeName": "Address",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a authority and trigger `on_authorities_change`.",
                        "",
                        "Not allow to call while authorities is changing.",
                        "This will insert new authority into the index 0 of authorities."
                      ]
                    },
                    {
                      "name": "remove_authority",
                      "fields": [
                        {
                          "name": "old",
                          "type": 43,
                          "typeName": "Address",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a authority and trigger `on_authorities_change`.",
                        "",
                        "Not allow to call while authorities is changing."
                      ]
                    },
                    {
                      "name": "swap_authority",
                      "fields": [
                        {
                          "name": "old",
                          "type": 43,
                          "typeName": "Address",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new",
                          "type": 43,
                          "typeName": "Address",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap the old authority with the new authority and trigger `on_authorities_change`.",
                        "",
                        "Not allow to call while authorities is changing."
                      ]
                    },
                    {
                      "name": "submit_authorities_change_signature",
                      "fields": [
                        {
                          "name": "address",
                          "type": 43,
                          "typeName": "Address",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signature",
                          "type": 48,
                          "typeName": "Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Submit the authorities change signature.",
                        "",
                        "Free to submit the first-correct signature."
                      ]
                    },
                    {
                      "name": "submit_new_message_root_signature",
                      "fields": [
                        {
                          "name": "address",
                          "type": 43,
                          "typeName": "Address",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signature",
                          "type": 48,
                          "typeName": "Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Submit the new message root signature.",
                        "",
                        "Free to submit the first-correct signature."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 315,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "AuthorityExisted",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The authority is already existed."
                      ]
                    },
                    {
                      "name": "TooManyAuthorities",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Too many authorities."
                      ]
                    },
                    {
                      "name": "NotAuthority",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "This is not an authority."
                      ]
                    },
                    {
                      "name": "AtLeastOneAuthority",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Require at least one authority. Not allow to decrease below one."
                      ]
                    },
                    {
                      "name": "OnAuthoritiesChange",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Currently, the authorities is changing."
                      ]
                    },
                    {
                      "name": "NoAuthoritiesChange",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Didn't find any authorities changes to sign."
                      ]
                    },
                    {
                      "name": "NoNewMessageRoot",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Didn't find any new message root to sign."
                      ]
                    },
                    {
                      "name": "BadSignature",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Failed to verify the signature."
                      ]
                    },
                    {
                      "name": "AlreadySubmitted",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "This authority had already finished his duty."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 316,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 52
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 317,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 317,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 52
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 318,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "misc",
                "WrapperOpaque"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 319
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 106,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": null,
                      "type": 319,
                      "typeName": "T",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 319,
            "type": {
              "path": [
                "pallet_im_online",
                "BoundedOpaqueNetworkState"
              ],
              "params": [
                {
                  "name": "PeerIdEncodingLimit",
                  "type": null
                },
                {
                  "name": "MultiAddrEncodingLimit",
                  "type": null
                },
                {
                  "name": "AddressesLimit",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "peer_id",
                      "type": 320,
                      "typeName": "WeakBoundedVec<u8, PeerIdEncodingLimit>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "external_addresses",
                      "type": 321,
                      "typeName": "WeakBoundedVec<WeakBoundedVec<u8, MultiAddrEncodingLimit>, AddressesLimit\n>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 320,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 321,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 320
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 322,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 322,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 320
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 323,
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "heartbeat",
                      "fields": [
                        {
                          "name": "heartbeat",
                          "type": 324,
                          "typeName": "Heartbeat<T::BlockNumber>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signature",
                          "type": 329,
                          "typeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "# <weight>",
                        "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is",
                        "  length of `heartbeat.network_state.external_address`",
                        "  - `O(K)`: decoding of length `K`",
                        "  - `O(E)`: decoding/encoding of length `E`",
                        "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
                        "  `ReceivedHeartbeats`",
                        "- DbWrites: `ReceivedHeartbeats`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 324,
            "type": {
              "path": [
                "pallet_im_online",
                "Heartbeat"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "network_state",
                      "type": 325,
                      "typeName": "OpaqueNetworkState",
                      "docs": [

                      ]
                    },
                    {
                      "name": "session_index",
                      "type": 4,
                      "typeName": "SessionIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "authority_index",
                      "type": 4,
                      "typeName": "AuthIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "validators_len",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 325,
            "type": {
              "path": [
                "sp_core",
                "offchain",
                "OpaqueNetworkState"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "peer_id",
                      "type": 326,
                      "typeName": "OpaquePeerId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "external_addresses",
                      "type": 327,
                      "typeName": "Vec<OpaqueMultiaddr>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 326,
            "type": {
              "path": [
                "sp_core",
                "OpaquePeerId"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 327,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 328
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 328,
            "type": {
              "path": [
                "sp_core",
                "offchain",
                "OpaqueMultiaddr"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 329,
            "type": {
              "path": [
                "pallet_im_online",
                "sr25519",
                "app_sr25519",
                "Signature"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 330,
                      "typeName": "/*«*/ sr25519::Signature /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 330,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 299,
                      "typeName": "[u8; 64]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 331,
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InvalidKey",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Non existent public key."
                      ]
                    },
                    {
                      "name": "DuplicatedHeartbeat",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Duplicated heartbeat."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 332,
            "type": {
              "path": [
                "pallet_treasury",
                "Proposal"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 333,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 247,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 334,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 57,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `ProposalCount`, `origin account`",
                        "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 106,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `Proposals`, `rejected proposer account`",
                        "- DbWrites: `Proposals`, `rejected proposer account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 106,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1).",
                        "- DbReads: `Proposals`, `Approvals`",
                        "- DbWrite: `Approvals`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 335,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 123,
                      "typeName": "[u8; 8]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 336,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "TooManyApprovals",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Too many approvals in the queue."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the treasury pallet."
              ]
            }
          },
          {
            "id": 337,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 338,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 338,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- The weight of this call is defined by the caller.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB change.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 155,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 338,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 338,
            "type": {
              "path": [
                "pangoro_runtime",
                "Call"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 107,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Babe",
                      "fields": [
                        {
                          "name": null,
                          "type": 138,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "name": null,
                          "type": 144,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 154,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Kton",
                      "fields": [
                        {
                          "name": null,
                          "type": 158,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Kton, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Authorship",
                      "fields": [
                        {
                          "name": null,
                          "type": 166,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ElectionProviderMultiPhase",
                      "fields": [
                        {
                          "name": null,
                          "type": 237,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Staking",
                      "fields": [
                        {
                          "name": null,
                          "type": 271,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "name": null,
                          "type": 287,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "name": null,
                          "type": 292,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MessageGadget",
                      "fields": [
                        {
                          "name": null,
                          "type": 307,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageGadget, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 30,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EcdsaAuthority",
                      "fields": [
                        {
                          "name": null,
                          "type": 314,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EcdsaAuthority, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ImOnline",
                      "fields": [
                        {
                          "name": null,
                          "type": 323,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 334,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": 337,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 339,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgePangolinGrandpa",
                      "fields": [
                        {
                          "name": null,
                          "type": 341,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BridgePangolinGrandpa, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgePangolinMessages",
                      "fields": [
                        {
                          "name": null,
                          "type": 347,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BridgePangolinMessages, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PangolinFeeMarket",
                      "fields": [
                        {
                          "name": null,
                          "type": 357,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PangolinFeeMarket, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TransactionPause",
                      "fields": [
                        {
                          "name": null,
                          "type": 358,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TransactionPause, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": 359,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 363,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BaseFee",
                      "fields": [
                        {
                          "name": null,
                          "type": 373,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BaseFee, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 31,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 339,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 340,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 338,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anonymously schedule a task."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an anonymously scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 340,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 338,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a named task."
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a named scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 340,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 338,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 340,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 338,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule_named`](Self::schedule_named).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 340,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 65
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 65,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 341,
            "type": {
              "path": [
                "pallet_bridge_grandpa",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "submit_finality_proof",
                      "fields": [
                        {
                          "name": "finality_target",
                          "type": 140,
                          "typeName": "Box<BridgedHeader<T, I>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "justification",
                          "type": 342,
                          "typeName": "GrandpaJustification<BridgedHeader<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Verify a target header is finalized according to the given finality proof.",
                        "",
                        "It will use the underlying storage pallet to fetch information about the current",
                        "authorities and best finalized header in order to verify that the header is finalized.",
                        "",
                        "If successful in verification, it will write the target header to the underlying storage",
                        "pallet."
                      ]
                    },
                    {
                      "name": "initialize",
                      "fields": [
                        {
                          "name": "init_data",
                          "type": 346,
                          "typeName": "super::InitializationData<BridgedHeader<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Bootstrap the bridge pallet with an initial header and authority set from which to sync.",
                        "",
                        "The initial configuration provided does not need to be the genesis header of the bridged",
                        "chain, it can be any arbitrary header. You can also provide the next scheduled set",
                        "change if it is already know.",
                        "",
                        "This function is only allowed to be called from a trusted origin and writes to storage",
                        "with practically no checks in terms of the validity of the data. It is important that",
                        "you ensure that valid data is being passed in."
                      ]
                    },
                    {
                      "name": "set_owner",
                      "fields": [
                        {
                          "name": "new_owner",
                          "type": 165,
                          "typeName": "Option<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Change `PalletOwner`.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    },
                    {
                      "name": "set_operational",
                      "fields": [
                        {
                          "name": "operational",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Halt or resume all pallet operations.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 342,
            "type": {
              "path": [
                "bp_header_chain",
                "justification",
                "GrandpaJustification"
              ],
              "params": [
                {
                  "name": "Header",
                  "type": 140
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "round",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "commit",
                      "type": 343,
                      "typeName": "finality_grandpa::Commit<Header::Hash, Header::Number,\nAuthoritySignature, AuthorityId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes_ancestries",
                      "type": 167,
                      "typeName": "Vec<Header>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 343,
            "type": {
              "path": [
                "finality_grandpa",
                "Commit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": 297
                },
                {
                  "name": "Id",
                  "type": 39
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H",
                      "docs": [

                      ]
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": [

                      ]
                    },
                    {
                      "name": "precommits",
                      "type": 344,
                      "typeName": "Vec<SignedPrecommit<H, N, S, Id>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 344,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 345
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 345,
            "type": {
              "path": [
                "finality_grandpa",
                "SignedPrecommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": 297
                },
                {
                  "name": "Id",
                  "type": 39
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "precommit",
                      "type": 302,
                      "typeName": "Precommit<H, N>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "signature",
                      "type": 297,
                      "typeName": "S",
                      "docs": [

                      ]
                    },
                    {
                      "name": "id",
                      "type": 39,
                      "typeName": "Id",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 346,
            "type": {
              "path": [
                "bp_header_chain",
                "InitializationData"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 140
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 140,
                      "typeName": "Box<H>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "authority_list",
                      "type": 37,
                      "typeName": "AuthorityList",
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_id",
                      "type": 8,
                      "typeName": "SetId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "is_halted",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 347,
            "type": {
              "path": [
                "pallet_bridge_messages",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set_owner",
                      "fields": [
                        {
                          "name": "new_owner",
                          "type": 165,
                          "typeName": "Option<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Change `PalletOwner`.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    },
                    {
                      "name": "set_operating_mode",
                      "fields": [
                        {
                          "name": "operating_mode",
                          "type": 348,
                          "typeName": "OperatingMode",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Halt or resume all/some pallet operations.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    },
                    {
                      "name": "update_pallet_parameter",
                      "fields": [
                        {
                          "name": "parameter",
                          "type": 73,
                          "typeName": "T::Parameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Update pallet parameter.",
                        "",
                        "May only be called either by root, or by `PalletOwner`.",
                        "",
                        "The weight is: single read for permissions check + 2 writes for parameter value and",
                        "event."
                      ]
                    },
                    {
                      "name": "send_message",
                      "fields": [
                        {
                          "name": "lane_id",
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "payload",
                          "type": 349,
                          "typeName": "T::OutboundPayload",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delivery_and_dispatch_fee",
                          "type": 6,
                          "typeName": "T::OutboundMessageFee",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Send message over lane."
                      ]
                    },
                    {
                      "name": "increase_message_fee",
                      "fields": [
                        {
                          "name": "lane_id",
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 8,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        },
                        {
                          "name": "additional_fee",
                          "type": 6,
                          "typeName": "T::OutboundMessageFee",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Pay additional fee for the message."
                      ]
                    },
                    {
                      "name": "receive_messages_proof",
                      "fields": [
                        {
                          "name": "relayer_id_at_bridged_chain",
                          "type": 0,
                          "typeName": "T::InboundRelayer",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proof",
                          "type": 354,
                          "typeName": "MessagesProofOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "messages_count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dispatch_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Receive messages proof from bridged chain.",
                        "",
                        "The weight of the call assumes that the transaction always brings outbound lane",
                        "state update. Because of that, the submitter (relayer) has no benefit of not including",
                        "this data in the transaction, so reward confirmations lags should be minimal."
                      ]
                    },
                    {
                      "name": "receive_messages_delivery_proof",
                      "fields": [
                        {
                          "name": "proof",
                          "type": 355,
                          "typeName": "MessagesDeliveryProofOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "relayers_state",
                          "type": 356,
                          "typeName": "UnrewardedRelayersState",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Receive messages delivery proof from bridged chain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 348,
            "type": {
              "path": [
                "bp_messages",
                "OperatingMode"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RejectingOutboundMessages",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Halted",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 349,
            "type": {
              "path": [
                "bp_message_dispatch",
                "MessagePayload"
              ],
              "params": [
                {
                  "name": "SourceChainAccountId",
                  "type": 0
                },
                {
                  "name": "TargetChainAccountPublic",
                  "type": 350
                },
                {
                  "name": "TargetChainSignature",
                  "type": 351
                },
                {
                  "name": "Call",
                  "type": 10
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "SpecVersion",
                      "docs": [

                      ]
                    },
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "origin",
                      "type": 352,
                      "typeName": "CallOrigin<SourceChainAccountId, TargetChainAccountPublic,\nTargetChainSignature>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "dispatch_fee_payment",
                      "type": 353,
                      "typeName": "DispatchFeePayment",
                      "docs": [

                      ]
                    },
                    {
                      "name": "call",
                      "type": 10,
                      "typeName": "Call",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 350,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSigner"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 40,
                          "typeName": "ed25519::Public",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 53,
                          "typeName": "sr25519::Public",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 282,
                          "typeName": "ecdsa::Public",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 351,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 298,
                          "typeName": "ed25519::Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 330,
                          "typeName": "sr25519::Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 48,
                          "typeName": "ecdsa::Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 352,
            "type": {
              "path": [
                "bp_message_dispatch",
                "CallOrigin"
              ],
              "params": [
                {
                  "name": "SourceChainAccountId",
                  "type": 0
                },
                {
                  "name": "TargetChainAccountPublic",
                  "type": 350
                },
                {
                  "name": "TargetChainSignature",
                  "type": 351
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "SourceRoot",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TargetAccount",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "SourceChainAccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 350,
                          "typeName": "TargetChainAccountPublic",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 351,
                          "typeName": "TargetChainSignature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SourceAccount",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "SourceChainAccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 353,
            "type": {
              "path": [
                "bp_runtime",
                "messages",
                "DispatchFeePayment"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "AtSourceChain",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AtTargetChain",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 354,
            "type": {
              "path": [
                "bridge_runtime_common",
                "messages",
                "target",
                "FromBridgedChainMessagesProof"
              ],
              "params": [
                {
                  "name": "BridgedHeaderHash",
                  "type": 9
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "bridged_header_hash",
                      "type": 9,
                      "typeName": "BridgedHeaderHash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "storage_proof",
                      "type": 111,
                      "typeName": "RawStorageProof",
                      "docs": [

                      ]
                    },
                    {
                      "name": "lane",
                      "type": 14,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonces_start",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonces_end",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 355,
            "type": {
              "path": [
                "bridge_runtime_common",
                "messages",
                "source",
                "FromBridgedChainMessagesDeliveryProof"
              ],
              "params": [
                {
                  "name": "BridgedHeaderHash",
                  "type": 9
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "bridged_header_hash",
                      "type": 9,
                      "typeName": "BridgedHeaderHash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "storage_proof",
                      "type": 111,
                      "typeName": "RawStorageProof",
                      "docs": [

                      ]
                    },
                    {
                      "name": "lane",
                      "type": 14,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 356,
            "type": {
              "path": [
                "bp_messages",
                "UnrewardedRelayersState"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "unrewarded_relayer_entries",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "messages_in_oldest_entry",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "total_messages",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 357,
            "type": {
              "path": [
                "pallet_fee_market",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "enroll_and_lock_collateral",
                      "fields": [
                        {
                          "name": "lock_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "relay_fee",
                          "type": 85,
                          "typeName": "Option<BalanceOf<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Any accounts can enroll to be a relayer by lock collateral. The relay fee is optional,",
                        "the default value is MinimumRelayFee in runtime. (Update market needed)",
                        "Note: One account can enroll only once."
                      ]
                    },
                    {
                      "name": "update_locked_collateral",
                      "fields": [
                        {
                          "name": "new_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Update locked collateral for enrolled relayer, only supporting lock more. (Update market",
                        "needed)"
                      ]
                    },
                    {
                      "name": "update_relay_fee",
                      "fields": [
                        {
                          "name": "new_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Update relay fee for enrolled relayer. (Update market needed)"
                      ]
                    },
                    {
                      "name": "cancel_enrollment",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Cancel enrolled relayer(Update market needed)"
                      ]
                    },
                    {
                      "name": "set_slash_protect",
                      "fields": [
                        {
                          "name": "slash_protect",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_assigned_relayers_number",
                      "fields": [
                        {
                          "name": "number",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 358,
            "type": {
              "path": [
                "module_transaction_pause",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "pause_transaction",
                      "fields": [
                        {
                          "name": "pallet_name",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "function_name",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "unpause_transaction",
                      "fields": [
                        {
                          "name": "pallet_name",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "function_name",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 359,
            "type": {
              "path": [
                "darwinia_evm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "call",
                      "fields": [
                        {
                          "name": "source",
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "input",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 99,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "gas_limit",
                          "type": 8,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 99,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 360,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 360,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "access_list",
                          "type": 361,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
                      ]
                    },
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "source",
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "init",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 99,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "gas_limit",
                          "type": 8,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 99,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 360,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 360,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "access_list",
                          "type": 361,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue an EVM create operation. This is similar to a contract creation transaction in",
                        "Ethereum."
                      ]
                    },
                    {
                      "name": "create2",
                      "fields": [
                        {
                          "name": "source",
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "init",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "salt",
                          "type": 9,
                          "typeName": "H256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 99,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "gas_limit",
                          "type": 8,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 99,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 360,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 360,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "access_list",
                          "type": 361,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Issue an EVM create2 operation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 360,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 99
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 99,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 361,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 362
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 362,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  43,
                  90
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 363,
            "type": {
              "path": [
                "darwinia_ethereum",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "transact",
                      "fields": [
                        {
                          "name": "transaction",
                          "type": 364,
                          "typeName": "Transaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "This the endpoint of RPC Ethereum transaction, consistent with frontier."
                      ]
                    },
                    {
                      "name": "message_transact",
                      "fields": [
                        {
                          "name": "transaction",
                          "type": 364,
                          "typeName": "Transaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "This is message transact only for substrate to substrate LCMP to call"
                      ]
                    },
                    {
                      "name": "root_transact",
                      "fields": [
                        {
                          "name": "target",
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "input",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Internal transaction only for root."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 364,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionV2"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": null,
                          "type": 365,
                          "typeName": "LegacyTransaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "name": null,
                          "type": 369,
                          "typeName": "EIP2930Transaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "name": null,
                          "type": 372,
                          "typeName": "EIP1559Transaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 365,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "LegacyTransaction"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_price",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_limit",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "action",
                      "type": 366,
                      "typeName": "TransactionAction",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "input",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "signature",
                      "type": 367,
                      "typeName": "TransactionSignature",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 366,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionAction"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "fields": [
                        {
                          "name": null,
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Create",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 367,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionSignature"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "v",
                      "type": 368,
                      "typeName": "TransactionRecoveryId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "r",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "s",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 368,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionRecoveryId"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 369,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP2930Transaction"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_price",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_limit",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "action",
                      "type": 366,
                      "typeName": "TransactionAction",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "input",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "access_list",
                      "type": 370,
                      "typeName": "AccessList",
                      "docs": [

                      ]
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    },
                    {
                      "name": "r",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "s",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 370,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 371
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 371,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "AccessListItem"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 43,
                      "typeName": "Address",
                      "docs": [

                      ]
                    },
                    {
                      "name": "slots",
                      "type": 90,
                      "typeName": "Vec<H256>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 372,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP1559Transaction"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_priority_fee_per_gas",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_fee_per_gas",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_limit",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "action",
                      "type": 366,
                      "typeName": "TransactionAction",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "input",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "access_list",
                      "type": 370,
                      "typeName": "AccessList",
                      "docs": [

                      ]
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    },
                    {
                      "name": "r",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "s",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 373,
            "type": {
              "path": [
                "pallet_base_fee",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "set_base_fee_per_gas",
                      "fields": [
                        {
                          "name": "fee",
                          "type": 99,
                          "typeName": "U256",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_is_active",
                      "fields": [
                        {
                          "name": "is_active",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_elasticity",
                      "fields": [
                        {
                          "name": "elasticity",
                          "type": 102,
                          "typeName": "Permill",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet"
              ]
            }
          },
          {
            "id": 375,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 376
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 376,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 377
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 377,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 377,
            "type": {
              "path": [
                "pallet_scheduler",
                "ScheduledV2"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": 338
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 378
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 66,
                      "typeName": "Option<Vec<u8>>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": [

                      ]
                    },
                    {
                      "name": "call",
                      "type": 338,
                      "typeName": "Call",
                      "docs": [

                      ]
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 340,
                      "typeName": "Option<schedule::Period<BlockNumber>>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "origin",
                      "type": 378,
                      "typeName": "PalletsOrigin",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 378,
            "type": {
              "path": [
                "pangoro_runtime",
                "OriginCaller"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "name": null,
                          "type": 379,
                          "typeName": "frame_system::Origin<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 380,
                          "typeName": "darwinia_ethereum::Origin",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "name": null,
                          "type": 304,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 379,
            "type": {
              "path": [
                "frame_system",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 380,
            "type": {
              "path": [
                "darwinia_ethereum",
                "RawOrigin"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "EthereumTransaction",
                      "fields": [
                        {
                          "name": null,
                          "type": 43,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 381,
            "type": {
              "path": [
                "pallet_scheduler",
                "Releases"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V2",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 382,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 383,
            "type": {
              "path": [
                "bp_header_chain",
                "AuthoritySet"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "authorities",
                      "type": 37,
                      "typeName": "AuthorityList",
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_id",
                      "type": 8,
                      "typeName": "SetId",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 384,
            "type": {
              "path": [
                "pallet_bridge_grandpa",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InvalidJustification",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The given justification is invalid for the given header."
                      ]
                    },
                    {
                      "name": "InvalidAuthoritySet",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The authority set from the underlying header chain is invalid."
                      ]
                    },
                    {
                      "name": "TooManyRequests",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "There are too many requests for the current window to handle."
                      ]
                    },
                    {
                      "name": "OldHeader",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The header being imported is older than the best finalized header known to the pallet."
                      ]
                    },
                    {
                      "name": "UnknownHeader",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The header is unknown to the pallet."
                      ]
                    },
                    {
                      "name": "UnsupportedScheduledChange",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The scheduled authority set change found in the header is unsupported by the pallet.",
                        "",
                        "This is the case for non-standard (e.g forced) authority set changes."
                      ]
                    },
                    {
                      "name": "NotInitialized",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The pallet is not yet initialized."
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "The pallet has already been initialized."
                      ]
                    },
                    {
                      "name": "Halted",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "All pallet operations are halted."
                      ]
                    },
                    {
                      "name": "StorageRootMismatch",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "The storage proof doesn't contains storage root. So it is invalid for given header."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 385,
            "type": {
              "path": [
                "bp_messages",
                "InboundLaneData"
              ],
              "params": [
                {
                  "name": "RelayerId",
                  "type": 0
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "relayers",
                      "type": 386,
                      "typeName": "VecDeque<UnrewardedRelayer<RelayerId>>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "last_confirmed_nonce",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 386,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 387
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 387,
            "type": {
              "path": [
                "bp_messages",
                "UnrewardedRelayer"
              ],
              "params": [
                {
                  "name": "RelayerId",
                  "type": 0
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "relayer",
                      "type": 0,
                      "typeName": "RelayerId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "messages",
                      "type": 75,
                      "typeName": "DeliveredMessages",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 388,
            "type": {
              "path": [
                "bp_messages",
                "OutboundLaneData"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "oldest_unpruned_nonce",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "latest_received_nonce",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "latest_generated_nonce",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 389,
            "type": {
              "path": [
                "bp_messages",
                "MessageKey"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "lane_id",
                      "type": 14,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 390,
            "type": {
              "path": [
                "bp_messages",
                "MessageData"
              ],
              "params": [
                {
                  "name": "Fee",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "payload",
                      "type": 10,
                      "typeName": "MessagePayload",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Fee",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 391,
            "type": {
              "path": [
                "pallet_bridge_messages",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Halted",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "All pallet operations are halted."
                      ]
                    },
                    {
                      "name": "MessageRejectedByChainVerifier",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Message has been treated as invalid by chain verifier."
                      ]
                    },
                    {
                      "name": "MessageRejectedByLaneVerifier",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Message has been treated as invalid by lane verifier."
                      ]
                    },
                    {
                      "name": "FailedToWithdrawMessageFee",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Submitter has failed to pay fee for delivering and dispatching messages."
                      ]
                    },
                    {
                      "name": "TooManyMessagesInTheProof",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The transaction brings too many messages."
                      ]
                    },
                    {
                      "name": "InvalidMessagesProof",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Invalid messages has been submitted."
                      ]
                    },
                    {
                      "name": "InvalidMessagesDeliveryProof",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Invalid messages delivery proof has been submitted."
                      ]
                    },
                    {
                      "name": "InvalidUnrewardedRelayers",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "The bridged chain has invalid `UnrewardedRelayers` in its storage (fatal for the lane)."
                      ]
                    },
                    {
                      "name": "InvalidUnrewardedRelayersState",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "The relayer has declared invalid unrewarded relayers state in the",
                        "`receive_messages_delivery_proof` call."
                      ]
                    },
                    {
                      "name": "MessageIsAlreadyDelivered",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "The message someone is trying to work with (i.e. increase fee) is already-delivered."
                      ]
                    },
                    {
                      "name": "MessageIsNotYetSent",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "The message someone is trying to work with (i.e. increase fee) is not yet sent."
                      ]
                    },
                    {
                      "name": "TryingToConfirmMoreMessagesThanExpected",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "The number of actually confirmed messages is going to be larger than the number of",
                        "messages in the proof. This may mean that this or bridged chain storage is corrupted."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 392,
            "type": {
              "path": [
                "pallet_fee_market",
                "types",
                "Relayer"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "collateral",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 393,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 392
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 394,
            "type": {
              "path": [
                "pallet_fee_market",
                "types",
                "Order"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "lane",
                      "type": 14,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "message",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "sent_time",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "confirm_time",
                      "type": 45,
                      "typeName": "Option<BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "locked_collateral",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "assigned_relayers",
                      "type": 395,
                      "typeName": "Vec<AssignedRelayer<AccountId, BlockNumber, Balance>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 395,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 396
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 396,
            "type": {
              "path": [
                "pallet_fee_market",
                "types",
                "AssignedRelayer"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "valid_range",
                      "type": 397,
                      "typeName": "Range<BlockNumber>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 397,
            "type": {
              "path": [
                "Range"
              ],
              "params": [
                {
                  "name": "Idx",
                  "type": 4
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "start",
                      "type": 4,
                      "typeName": "Idx",
                      "docs": [

                      ]
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "Idx",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 398,
            "type": {
              "path": [
                "pallet_fee_market",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InsufficientBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Insufficient balance."
                      ]
                    },
                    {
                      "name": "AlreadyEnrolled",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The relayer has been enrolled."
                      ]
                    },
                    {
                      "name": "NotEnrolled",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "This relayer doesn't enroll ever."
                      ]
                    },
                    {
                      "name": "CollateralTooLow",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Locked collateral is too low to cover one order."
                      ]
                    },
                    {
                      "name": "StillHasOrdersNotConfirmed",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Update locked collateral is not allow since some orders are not confirm."
                      ]
                    },
                    {
                      "name": "RelayFeeTooLow",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The fee is lower than MinimumRelayFee."
                      ]
                    },
                    {
                      "name": "OccupiedRelayer",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The relayer is occupied, and can't cancel enrollment now."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 399,
            "type": {
              "path": [
                "module_transaction_pause",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "CannotPause",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "can not pause"
                      ]
                    },
                    {
                      "name": "InvalidCharacter",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "invalid character encoding"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 400,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  43,
                  9
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 401,
            "type": {
              "path": [
                "darwinia_evm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Not enough balance to perform action"
                      ]
                    },
                    {
                      "name": "FeeOverflow",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Calculating total fee overflowed"
                      ]
                    },
                    {
                      "name": "PaymentOverflow",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Calculating total payment overflowed"
                      ]
                    },
                    {
                      "name": "WithdrawFailed",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Withdraw fee failed"
                      ]
                    },
                    {
                      "name": "GasPriceTooLow",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Gas price is too low."
                      ]
                    },
                    {
                      "name": "InvalidNonce",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Nonce is invalid"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 402,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 403
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 403,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  364,
                  404,
                  409
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 404,
            "type": {
              "path": [
                "fp_rpc",
                "TransactionStatus"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "transaction_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "transaction_index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "from",
                      "type": 43,
                      "typeName": "H160",
                      "docs": [

                      ]
                    },
                    {
                      "name": "to",
                      "type": 405,
                      "typeName": "Option<H160>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "contract_address",
                      "type": 405,
                      "typeName": "Option<H160>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs",
                      "type": 406,
                      "typeName": "Vec<Log>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs_bloom",
                      "type": 407,
                      "typeName": "Bloom",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 405,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 43
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 43,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 406,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 89
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 407,
            "type": {
              "path": [
                "ethbloom",
                "Bloom"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 408,
                      "typeName": "[u8; /*«*/ BLOOM_SIZE /*»*/]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 408,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Array": {
                  "len": 256,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 409,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "ReceiptV3"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": null,
                          "type": 410,
                          "typeName": "EIP658ReceiptData",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "name": null,
                          "type": 410,
                          "typeName": "EIP2930ReceiptData",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "name": null,
                          "type": 410,
                          "typeName": "EIP1559ReceiptData",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 410,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "EIP658ReceiptData"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "status_code",
                      "type": 2,
                      "typeName": "u8",
                      "docs": [

                      ]
                    },
                    {
                      "name": "used_gas",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs_bloom",
                      "type": 407,
                      "typeName": "Bloom",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs",
                      "type": 406,
                      "typeName": "Vec<Log>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 411,
            "type": {
              "path": [
                "ethereum",
                "block",
                "Block"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 364
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 412,
                      "typeName": "Header",
                      "docs": [

                      ]
                    },
                    {
                      "name": "transactions",
                      "type": 414,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "ommers",
                      "type": 415,
                      "typeName": "Vec<Header>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 412,
            "type": {
              "path": [
                "ethereum",
                "header",
                "Header"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "ommers_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "beneficiary",
                      "type": 43,
                      "typeName": "H160",
                      "docs": [

                      ]
                    },
                    {
                      "name": "state_root",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "transactions_root",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "receipts_root",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs_bloom",
                      "type": 407,
                      "typeName": "Bloom",
                      "docs": [

                      ]
                    },
                    {
                      "name": "difficulty",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "number",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_limit",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_used",
                      "type": 99,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "timestamp",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "extra_data",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mix_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 413,
                      "typeName": "H64",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 413,
            "type": {
              "path": [
                "ethereum_types",
                "hash",
                "H64"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 123,
                      "typeName": "[u8; /*«*/ 8 /*»*/]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 414,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 364
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 415,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 412
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 416,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 409
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 417,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Sequence": {
                  "type": 404
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 418,
            "type": {
              "path": [
                "darwinia_ethereum",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "InvalidSignature",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Signature is invalid."
                      ]
                    },
                    {
                      "name": "PreLogExists",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Pre-log is present, therefore transact is not allowed."
                      ]
                    },
                    {
                      "name": "InternalTransactionExitError",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "The internal transaction failed."
                      ]
                    },
                    {
                      "name": "InternalTransactionRevertError",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InternalTransactionFatalError",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReadyOnlyCall",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The internal call failed."
                      ]
                    },
                    {
                      "name": "MessageTransactionError",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Message transaction invalid"
                      ]
                    },
                    {
                      "name": "MessageValidateError",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Message validate invalid"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Ethereum pallet errors."
              ]
            }
          },
          {
            "id": 419,
            "type": {
              "path": [
                "fp_self_contained",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 155
                },
                {
                  "name": "Call",
                  "type": 338
                },
                {
                  "name": "Signature",
                  "type": 351
                },
                {
                  "name": "Extra",
                  "type": 420
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 429,
                      "typeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 420,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "Tuple": [
                  421,
                  422,
                  423,
                  424,
                  426,
                  427,
                  428
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 421,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 422,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 423,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 424,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 425,
                      "typeName": "Era",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 425,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "params": [

              ],
              "def": {
                "Variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 27,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 28,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 29,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 30,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 31,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 33,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 34,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 35,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 36,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 37,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 38,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 39,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 40,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 41,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 42,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 43,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 44,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 45,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 46,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 47,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 48,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 49,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 50,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 51,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 52,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 53,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 54,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 55,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 56,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 57,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 58,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 59,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 60,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 61,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 62,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 63,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 64,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 65,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 66,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 67,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 68,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 69,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 70,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 71,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 72,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 73,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 74,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 75,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 76,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 77,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 78,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 79,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 80,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 81,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 82,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 83,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 84,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 85,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 86,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 87,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 88,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 89,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 90,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 91,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 92,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 93,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 94,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 95,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 96,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 97,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 98,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 99,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 100,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 101,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 102,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 103,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 104,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 105,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 106,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 107,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 108,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 109,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 110,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 111,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 112,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 113,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 114,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 115,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 116,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 117,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 118,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 119,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 120,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 121,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 122,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 123,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 124,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 125,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 126,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 127,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 128,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 129,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 130,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 131,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 132,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 133,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 134,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 135,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 136,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 137,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 138,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 139,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 140,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 141,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 142,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 143,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 144,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 145,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 146,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 147,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 148,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 149,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 150,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 151,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 152,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 153,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 154,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 155,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 156,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 157,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 158,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 159,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 160,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 161,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 162,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 163,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 164,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 165,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 166,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 167,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 168,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 169,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 170,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 171,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 172,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 173,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 174,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 175,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 176,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 177,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 178,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 179,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 180,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 181,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 182,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 183,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 184,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 185,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 186,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 187,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 188,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 189,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 190,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 191,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 192,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 193,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 194,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 195,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 196,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 197,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 198,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 199,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 200,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 201,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 202,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 203,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 204,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 205,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 206,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 207,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 208,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 209,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 210,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 211,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 212,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 213,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 214,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 215,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 216,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 217,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 218,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 219,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 220,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 221,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 222,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 223,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 224,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 225,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 226,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 227,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 228,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 229,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 230,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 231,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 232,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 233,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 234,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 235,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 236,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 237,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 238,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 239,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 240,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 241,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 242,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 243,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 244,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 245,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 246,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 247,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 248,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 249,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 250,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 251,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 252,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 253,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 254,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 255,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 426,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 106,
                      "typeName": "T::Index",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 427,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 428,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 57,
                      "typeName": "BalanceOf<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 429,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 155
                },
                {
                  "name": "Call",
                  "type": 338
                },
                {
                  "name": "Signature",
                  "type": 351
                },
                {
                  "name": "Extra",
                  "type": 420
                }
              ],
              "def": {
                "Composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 430,
            "type": {
              "path": [
                "pangoro_runtime",
                "Runtime"
              ],
              "params": [

              ],
              "def": {
                "Composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "type": {
                  "Plain": 7
                },
                "fallback": "0x000000000000000000000000000000000000000000000000",
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "Plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "Plain": 11
                },
                "fallback": "0x00",
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "Plain": 15
                },
                "fallback": "0x00",
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: This storage item is explicitly unbounded since it is never intended to be read",
                  " from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 9,
                    "value": 104
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": {
                  "Plain": 105
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "type": {
                  "Plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "type": {
                  "Plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": {
                  "Plain": 103
                },
                "fallback": "0x00",
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "type": 107
          },
          "events": {
            "type": 18
          },
          "constants": [
            {
              "name": "BlockWeights",
              "type": 112,
              "value": "0x00f2052a0100000000204aa9d1010000405973070000000001c0ca489351010000010098f73e5d010000010000000000000000405973070000000001c0529bfdc50100000100204aa9d1010000010088526a740000004059730700000000000000",
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "type": 116,
              "value": "0x00003c000000500000005000",
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "type": 4,
              "value": "0x60090000",
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "type": 118,
              "value": "0x40787d010000000000e1f50500000000",
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "type": 119,
              "value": "0x1c50616e676f726f1c50616e676f726f000000007a7100000000000038df6acb689907609b0300000037e397fc7c91f5e40100000040fe3ad401f8959a05000000ab3c0572291feb8b01000000cbca25e39f14238702000000ed99c5acb25eedf503000000687ad44ad37f03c201000000bc9d89904f5b923f01000000d2bc9897eed08f1503000000f78b278be53f454c0200000037c8bb1350a9a2a801000000582211f65bb14b8904000000e65b00e46cedd0aa02000000bd78255d4feeea1f0400000000000000",
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "type": 124,
              "value": "0x1200",
              "docs": [
                " The designated SS85 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "errors": {
            "type": 125
          },
          "index": 0
        },
        {
          "name": "Babe",
          "storage": {
            "prefix": "Babe",
            "items": [
              {
                "name": "EpochIndex",
                "modifier": "Default",
                "type": {
                  "Plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current epoch index."
                ]
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "Plain": 126
                },
                "fallback": "0x00",
                "docs": [
                  " Current epoch authorities."
                ]
              },
              {
                "name": "GenesisSlot",
                "modifier": "Default",
                "type": {
                  "Plain": 130
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The slot at which the first epoch actually started. This is 0",
                  " until the first block of the chain."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": {
                  "Plain": 130
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current slot number."
                ]
              },
              {
                "name": "Randomness",
                "modifier": "Default",
                "type": {
                  "Plain": 1
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The epoch randomness for the *current* epoch.",
                  "",
                  " # Security",
                  "",
                  " This MUST NOT be used for gambling, as it can be influenced by a",
                  " malicious validator in the short term. It MAY be used in many",
                  " cryptographic protocols, however, so long as one remembers that this",
                  " (like everything else on-chain) it is public. For example, it can be",
                  " used where a number is needed that cannot have been chosen by an",
                  " adversary, for purposes such as public-coin zero-knowledge proofs."
                ]
              },
              {
                "name": "PendingEpochConfigChange",
                "modifier": "Optional",
                "type": {
                  "Plain": 131
                },
                "fallback": "0x00",
                "docs": [
                  " Pending epoch configuration change that will be applied when the next epoch is enacted."
                ]
              },
              {
                "name": "NextRandomness",
                "modifier": "Default",
                "type": {
                  "Plain": 1
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Next epoch randomness."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "type": {
                  "Plain": 126
                },
                "fallback": "0x00",
                "docs": [
                  " Next epoch authorities."
                ]
              },
              {
                "name": "SegmentIndex",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Randomness under construction.",
                  "",
                  " We make a trade-off between storage accesses and list length.",
                  " We store the under-construction randomness in segments of up to",
                  " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                  "",
                  " Once a segment reaches this length, we begin the next one.",
                  " We reset all segments and return to `0` at the beginning of every",
                  " epoch."
                ]
              },
              {
                "name": "UnderConstruction",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 134
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                ]
              },
              {
                "name": "Initialized",
                "modifier": "Optional",
                "type": {
                  "Plain": 136
                },
                "fallback": "0x00",
                "docs": [
                  " Temporary value (cleared at block finalization) which is `Some`",
                  " if per-block initialization has already been called for current block."
                ]
              },
              {
                "name": "AuthorVrfRandomness",
                "modifier": "Default",
                "type": {
                  "Plain": 136
                },
                "fallback": "0x00",
                "docs": [
                  " This field should always be populated during block processing unless",
                  " secondary plain slots are enabled (which don't contain a VRF output).",
                  "",
                  " It is set in `on_initialize`, before it will contain the value from the last block."
                ]
              },
              {
                "name": "EpochStart",
                "modifier": "Default",
                "type": {
                  "Plain": 65
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The block numbers when the last and current epoch have started, respectively `N-1` and",
                  " `N`.",
                  " NOTE: We track this is in order to annotate the block number when a given pool of",
                  " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                  " slots, which may be skipped, the block numbers may not line up with the slot numbers."
                ]
              },
              {
                "name": "Lateness",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " How late the current block is compared to its parent.",
                  "",
                  " This entry is populated as part of block execution and is cleaned up",
                  " on block finalization. Querying this storage entry outside of block",
                  " execution context should always yield zero."
                ]
              },
              {
                "name": "EpochConfig",
                "modifier": "Optional",
                "type": {
                  "Plain": 137
                },
                "fallback": "0x00",
                "docs": [
                  " The configuration for the current epoch. Should never be `None` as it is initialized in",
                  " genesis."
                ]
              },
              {
                "name": "NextEpochConfig",
                "modifier": "Optional",
                "type": {
                  "Plain": 137
                },
                "fallback": "0x00",
                "docs": [
                  " The configuration for the next epoch, `None` if the config will not change",
                  " (you can fallback to `EpochConfig` instead in that case)."
                ]
              }
            ]
          },
          "calls": {
            "type": 138
          },
          "events": null,
          "constants": [
            {
              "name": "EpochDuration",
              "type": 8,
              "value": "0xb004000000000000",
              "docs": [
                " The amount of time, in slots, that each epoch should last.",
                " NOTE: Currently it is not possible to change the epoch duration after",
                " the chain has started. Attempting to do so will brick block production."
              ]
            },
            {
              "name": "ExpectedBlockTime",
              "type": 8,
              "value": "0x7017000000000000",
              "docs": [
                " The expected average block time at which BABE should be creating",
                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                " what the expected average block time should be based on the slot",
                " duration and the security parameter `c` (where `1 - c` represents",
                " the probability of a slot being empty)."
              ]
            },
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": "0xa0860100",
              "docs": [
                " Max number of authorities allowed"
              ]
            }
          ],
          "errors": {
            "type": 143
          },
          "index": 2
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "Plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "Plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "type": 144
          },
          "events": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": 8,
              "value": "0xb80b000000000000",
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "errors": null,
          "index": 3
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "Plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The balance of an account.",
                  "",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 146
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 150
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "Plain": 153
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "type": 154
          },
          "events": {
            "type": 25
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "errors": {
            "type": 157
          },
          "index": 4
        },
        {
          "name": "Kton",
          "storage": {
            "prefix": "Kton",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "Plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The balance of an account.",
                  "",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 146
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 150
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "Plain": 153
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "type": 158
          },
          "events": {
            "type": 27
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "errors": {
            "type": 159
          },
          "index": 5
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "Plain": 74
                },
                "fallback": "0x000064a7b3b6e00d0000000000000000",
                "docs": [

                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "Plain": 160
                },
                "fallback": "0x00",
                "docs": [

                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "TransactionByteFee",
              "type": 6,
              "value": "0x50c30000000000000000000000000000",
              "docs": [
                " The fee to be paid for making a transaction; the per-byte portion."
              ]
            },
            {
              "name": "OperationalFeeMultiplier",
              "type": 2,
              "value": "0x05",
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            },
            {
              "name": "WeightToFee",
              "type": 161,
              "value": "0x040000000000000000000000000000000000b4c4040001",
              "docs": [
                " The polynomial that is applied in order to derive fee from weight."
              ]
            }
          ],
          "errors": null,
          "index": 6
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "items": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "type": {
                  "Plain": 163
                },
                "fallback": "0x00",
                "docs": [
                  " Uncles"
                ]
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "type": {
                  "Plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Author of current block."
                ]
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "type": {
                  "Plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " Whether uncles were already set in this block."
                ]
              }
            ]
          },
          "calls": {
            "type": 166
          },
          "events": null,
          "constants": [
            {
              "name": "UncleGenerations",
              "type": 4,
              "value": "0x05000000",
              "docs": [
                " The number of blocks back we should accept uncles.",
                " This means that we will deal with uncle-parents that are",
                " `UncleGenerations + 1` before `now`."
              ]
            }
          ],
          "errors": {
            "type": 168
          },
          "index": 7
        },
        {
          "name": "ElectionProviderMultiPhase",
          "storage": {
            "prefix": "ElectionProviderMultiPhase",
            "items": [
              {
                "name": "Round",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x01000000",
                "docs": [
                  " Internal counter for the number of rounds.",
                  "",
                  " This is useful for de-duplication of transactions submitted to the pool, and general",
                  " diagnostics of the pallet.",
                  "",
                  " This is merely incremented once per every time that an upstream `elect` is called."
                ]
              },
              {
                "name": "CurrentPhase",
                "modifier": "Default",
                "type": {
                  "Plain": 169
                },
                "fallback": "0x00",
                "docs": [
                  " Current phase."
                ]
              },
              {
                "name": "QueuedSolution",
                "modifier": "Optional",
                "type": {
                  "Plain": 171
                },
                "fallback": "0x00",
                "docs": [
                  " Current best solution, signed or unsigned, queued to be returned upon `elect`."
                ]
              },
              {
                "name": "Snapshot",
                "modifier": "Optional",
                "type": {
                  "Plain": 176
                },
                "fallback": "0x00",
                "docs": [
                  " Snapshot data of the round.",
                  "",
                  " This is created at the beginning of the signed phase and cleared upon calling `elect`."
                ]
              },
              {
                "name": "DesiredTargets",
                "modifier": "Optional",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Desired number of targets to elect for this round.",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SnapshotMetadata",
                "modifier": "Optional",
                "type": {
                  "Plain": 179
                },
                "fallback": "0x00",
                "docs": [
                  " The metadata of the [`RoundSnapshot`]",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SignedSubmissionNextIndex",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The next index to be assigned to an incoming signed submission.",
                  "",
                  " Every accepted submission is assigned a unique index; that index is bound to that particular",
                  " submission for the duration of the election. On election finalization, the next index is",
                  " reset to 0.",
                  "",
                  " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                  " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                  " because iteration is slow. Instead, we store the value here."
                ]
              },
              {
                "name": "SignedSubmissionIndices",
                "modifier": "Default",
                "type": {
                  "Plain": 180
                },
                "fallback": "0x00",
                "docs": [
                  " A sorted, bounded set of `(score, index)`, where each `index` points to a value in",
                  " `SignedSubmissions`.",
                  "",
                  " We never need to process more than a single signed submission at a time. Signed submissions",
                  " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                  " them one at a time instead of reading and decoding all of them at once."
                ]
              },
              {
                "name": "SignedSubmissionsMap",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 184
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000",
                "docs": [
                  " Unchecked, signed solutions.",
                  "",
                  " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                  " allowing us to keep only a single one in memory at a time.",
                  "",
                  " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                  " affect; we shouldn't need a cryptographically secure hasher."
                ]
              },
              {
                "name": "MinimumUntrustedScore",
                "modifier": "Optional",
                "type": {
                  "Plain": 175
                },
                "fallback": "0x00",
                "docs": [
                  " The minimum score that each 'untrusted' solution must attain in order to be considered",
                  " feasible.",
                  "",
                  " Can be set via `set_minimum_untrusted_score`."
                ]
              }
            ]
          },
          "calls": {
            "type": 237
          },
          "events": {
            "type": 28
          },
          "constants": [
            {
              "name": "UnsignedPhase",
              "type": 4,
              "value": "0x2c010000",
              "docs": [
                " Duration of the unsigned phase."
              ]
            },
            {
              "name": "SignedPhase",
              "type": 4,
              "value": "0x00000000",
              "docs": [
                " Duration of the signed phase."
              ]
            },
            {
              "name": "SolutionImprovementThreshold",
              "type": 108,
              "value": "0x20a10700",
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" (in any phase)."
              ]
            },
            {
              "name": "OffchainRepeat",
              "type": 4,
              "value": "0x05000000",
              "docs": [
                " The repeat threshold of the offchain worker.",
                "",
                " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
                " to submit the worker's solution."
              ]
            },
            {
              "name": "MinerTxPriority",
              "type": 8,
              "value": "0x65666666666666e6",
              "docs": [
                " The priority of the unsigned transaction submitted in the unsigned-phase"
              ]
            },
            {
              "name": "MinerMaxWeight",
              "type": 8,
              "value": "0xc0d8426950010000",
              "docs": [
                " Maximum weight that the miner should consume.",
                "",
                " The miner will ensure that the total weight of the unsigned solution will not exceed",
                " this value, based on [`WeightInfo::submit_unsigned`]."
              ]
            },
            {
              "name": "SignedMaxSubmissions",
              "type": 4,
              "value": "0x0a000000",
              "docs": [
                " Maximum number of signed submissions that can be queued.",
                "",
                " It is best to avoid adjusting this during an election, as it impacts downstream data",
                " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
                " update this value during an election, you _must_ ensure that",
                " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
                " attempts to submit new solutions may cause a runtime panic."
              ]
            },
            {
              "name": "SignedMaxWeight",
              "type": 8,
              "value": "0xc0d8426950010000",
              "docs": [
                " Maximum weight of a signed solution.",
                "",
                " This should probably be similar to [`Config::MinerMaxWeight`]."
              ]
            },
            {
              "name": "SignedRewardBase",
              "type": 6,
              "value": "0x40420f00000000000000000000000000",
              "docs": [
                " Base reward for a signed solution"
              ]
            },
            {
              "name": "SignedDepositBase",
              "type": 6,
              "value": "0x40420f00000000000000000000000000",
              "docs": [
                " Base deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositByte",
              "type": 6,
              "value": "0xe8030000000000000000000000000000",
              "docs": [
                " Per-byte deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositWeight",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " Per-weight deposit for a signed solution."
              ]
            },
            {
              "name": "VoterSnapshotPerBlock",
              "type": 4,
              "value": "0xe4570000",
              "docs": [
                " The maximum number of voters to put in the snapshot. At the moment, snapshots are only",
                " over a single block, but once multi-block elections are introduced they will take place",
                " over multiple blocks.",
                "",
                " Also, note the data type: If the voters are represented by a `u32` in `type",
                " CompactSolution`, the same `u32` is used here to ensure bounds are respected."
              ]
            },
            {
              "name": "MinerMaxLength",
              "type": 4,
              "value": "0x00003600",
              "docs": [
                " Maximum length (bytes) that the mined solution should consume.",
                "",
                " The miner will ensure that the total length of the unsigned solution will not exceed",
                " this value."
              ]
            }
          ],
          "errors": {
            "type": 239
          },
          "index": 8
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "items": [
              {
                "name": "HistoryDepth",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x50010000",
                "docs": [
                  " Number of eras to keep in history.",
                  "",
                  " Information is kept for eras in `[current_era - history_depth; current_era]`.",
                  "",
                  " Must be more than the number of eras delayed by session otherwise. I.e. active era must",
                  " always be in history. I.e. `active_era > current_era - history_depth` must be",
                  " guaranteed."
                ]
              },
              {
                "name": "ValidatorCount",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The ideal number of staking participants."
                ]
              },
              {
                "name": "MinimumValidatorCount",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Minimum number of staking participants before emergency conditions are imposed."
                ]
              },
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "type": {
                  "Plain": 80
                },
                "fallback": "0x00",
                "docs": [
                  " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                  " easy to initialize and the performance hit is minimal (we expect no more than four",
                  " invulnerables) and restricted to testnets."
                ]
              },
              {
                "name": "Bonded",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from all locked \"stash\" accounts to the controller account."
                ]
              },
              {
                "name": "MinNominatorBond",
                "modifier": "Default",
                "type": {
                  "Plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The minimum active bond to become and maintain the role of a nominator."
                ]
              },
              {
                "name": "MinValidatorBond",
                "modifier": "Default",
                "type": {
                  "Plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The minimum active bond to become and maintain the role of a validator."
                ]
              },
              {
                "name": "Ledger",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 240
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
                ]
              },
              {
                "name": "Payee",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 248
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Where the reward payment should be made. Keyed by stash."
                ]
              },
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 249
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " The map from (wannabe) validator stash key to the preferences of that validator.",
                  "",
                  " When updating this storage item, you must also update the `CounterForValidators`."
                ]
              },
              {
                "name": "CounterForValidators",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " A tracker to keep count of the number of items in the `Validators` map."
                ]
              },
              {
                "name": "MaxValidatorsCount",
                "modifier": "Optional",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The maximum validator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "Nominators",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 251
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The map from nominator stash key to the set of stash keys of all validators to nominate.",
                  "",
                  " When updating this storage item, you must also update the `CounterForNominators`."
                ]
              },
              {
                "name": "CounterForNominators",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " A tracker to keep count of the number of items in the `Nominators` map."
                ]
              },
              {
                "name": "MaxNominatorsCount",
                "modifier": "Optional",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The maximum nominator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "CurrentEra",
                "modifier": "Optional",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The current era index.",
                  "",
                  " This is the latest planned era, depending on how the Session pallet queues the validator",
                  " set, it might be active or not."
                ]
              },
              {
                "name": "ActiveEra",
                "modifier": "Optional",
                "type": {
                  "Plain": 252
                },
                "fallback": "0x00",
                "docs": [
                  " The active era information, it holds index and start.",
                  "",
                  " The active era is the era being currently rewarded. Validator set of this era must be",
                  " equal to [`SessionInterface::validators`]."
                ]
              },
              {
                "name": "ErasStartSessionIndex",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Note: This tracks the starting session (i.e. session index when era start being active)",
                  " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
                ]
              },
              {
                "name": "ErasStakers",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 253,
                    "value": 56
                  }
                },
                "fallback": "0x0000000000000000000000",
                "docs": [
                  " Exposure of validator at era.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasStakersClipped",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 253,
                    "value": 56
                  }
                },
                "fallback": "0x0000000000000000000000",
                "docs": [
                  " Clipped Exposure of validator at era.",
                  "",
                  " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                  " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                  " (Note: the field `total` and `own` of the exposure remains unchanged).",
                  " This is used to limit the i/o cost for the nominator payout.",
                  "",
                  " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasValidatorPrefs",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 253,
                    "value": 249
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " Similar to `ErasStakers`, this holds the preferences of validators.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras."
                ]
              },
              {
                "name": "ErasValidatorReward",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 6
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Eras that haven't finished yet or has been removed doesn't have reward."
                ]
              },
              {
                "name": "ErasRewardPoints",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 254
                  }
                },
                "fallback": "0x0000000000",
                "docs": [
                  " Rewards for the last `HISTORY_DEPTH` eras.",
                  " If reward hasn't been set or has been removed then 0 reward is returned."
                ]
              },
              {
                "name": "ErasTotalStake",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " The total amount staked for the last `HISTORY_DEPTH` eras.",
                  " If total hasn't been set or has been removed then 0 stake is returned."
                ]
              },
              {
                "name": "ForceEra",
                "modifier": "Default",
                "type": {
                  "Plain": 258
                },
                "fallback": "0x00",
                "docs": [
                  " Mode of era forcing."
                ]
              },
              {
                "name": "SlashRewardFraction",
                "modifier": "Default",
                "type": {
                  "Plain": 108
                },
                "fallback": "0x00000000",
                "docs": [
                  " The percentage of the slash that is distributed to reporters.",
                  "",
                  " The rest of the slashed value is handled by the `Slash`."
                ]
              },
              {
                "name": "CanceledSlashPayout",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The amount of currency given to reporters of a slash event which was",
                  " canceled by extraordinary circumstances (e.g. governance)."
                ]
              },
              {
                "name": "UnappliedSlashes",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 259
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All unapplied slashes that are queued for later."
                ]
              },
              {
                "name": "BondedEras",
                "modifier": "Default",
                "type": {
                  "Plain": 104
                },
                "fallback": "0x00",
                "docs": [
                  " A mapping from still-bonded eras to the first session index of that era.",
                  "",
                  " Must contains information for eras for the range:",
                  " `[active_era - bounding_duration; active_era]`"
                ]
              },
              {
                "name": "ValidatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 253,
                    "value": 264
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All slashing events on validators, mapped by era to the highest slash proportion",
                  " and slash value of the era."
                ]
              },
              {
                "name": "NominatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 253,
                    "value": 261
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All slashing events on nominators, mapped by era to the highest slash value of the era."
                ]
              },
              {
                "name": "SlashingSpans",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 265
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Slashing spans for stash accounts."
                ]
              },
              {
                "name": "SpanSlash",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 257,
                    "value": 266
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Records information about the maximum slash of a stash within a slashing span,",
                  " as well as how much reward has been paid out."
                ]
              },
              {
                "name": "EarliestUnappliedSlash",
                "modifier": "Optional",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The earliest era for which we have a pending, unapplied slash."
                ]
              },
              {
                "name": "CurrentPlannedSession",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The last planned session scheduled by the session pallet.",
                  "",
                  " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
                ]
              },
              {
                "name": "OffendingValidators",
                "modifier": "Default",
                "type": {
                  "Plain": 267
                },
                "fallback": "0x00",
                "docs": [
                  " Indices of validators that have offended in the active era and whether they are currently",
                  " disabled.",
                  "",
                  " This value should be a superset of disabled validators since not all offences lead to the",
                  " validator being disabled (if there was no slash). This is needed to track the percentage of",
                  " validators that have offended in the current era, ensuring a new era is forced if",
                  " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
                  " whether a given validator has previously offended using binary search. It gets cleared when",
                  " the era ends."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "Plain": 269
                },
                "fallback": "0x06",
                "docs": [
                  " True if network has been upgraded to this version.",
                  " Storage version of the pallet.",
                  "",
                  " This is set to v7.0.0 for new networks."
                ]
              },
              {
                "name": "ChillThreshold",
                "modifier": "Optional",
                "type": {
                  "Plain": 270
                },
                "fallback": "0x00",
                "docs": [
                  " The threshold for when users can start calling `chill_other` for other validators /",
                  " nominators. The threshold is compared to the actual number of validators / nominators",
                  " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
                ]
              },
              {
                "name": "LivingTime",
                "modifier": "Default",
                "type": {
                  "Plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The chain's running time form genesis in milliseconds,",
                  " use for calculate darwinia era payout"
                ]
              },
              {
                "name": "PayoutFraction",
                "modifier": "Default",
                "type": {
                  "Plain": 108
                },
                "fallback": "0x00000000",
                "docs": [
                  " The percentage of the total payout that is distributed to validators and nominators",
                  "",
                  " The reset might go to Treasury or something else."
                ]
              },
              {
                "name": "RingPool",
                "modifier": "Default",
                "type": {
                  "Plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Total *RING* in pool."
                ]
              },
              {
                "name": "KtonPool",
                "modifier": "Default",
                "type": {
                  "Plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Total *KTON* in pool."
                ]
              }
            ]
          },
          "calls": {
            "type": 271
          },
          "events": {
            "type": 32
          },
          "constants": [
            {
              "name": "SessionsPerEra",
              "type": 4,
              "value": "0x03000000",
              "docs": [
                " Number of sessions per era."
              ]
            },
            {
              "name": "SlashDeferDuration",
              "type": 4,
              "value": "0x37000000",
              "docs": [
                " Number of eras that slashes are deferred by, after computation.",
                "",
                " This should be less than the bonding duration. Set to 0 if slashes",
                " should be applied immediately, without opportunity for intervention."
              ]
            },
            {
              "name": "MaxNominatorRewardedPerValidator",
              "type": 4,
              "value": "0x40000000",
              "docs": [
                " The maximum number of nominators rewarded for each validator.",
                "",
                " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
                " claim their reward. This used to limit the i/o cost for the nominator payout."
              ]
            },
            {
              "name": "BondingDurationInEra",
              "type": 4,
              "value": "0x38000000",
              "docs": [
                " Number of eras that staked funds must remain bonded for."
              ]
            },
            {
              "name": "BondingDurationInBlockNumber",
              "type": 4,
              "value": "0x80130300",
              "docs": [
                " Number of eras that staked funds must remain bonded for."
              ]
            },
            {
              "name": "Cap",
              "type": 6,
              "value": "0x0000e8890423c78a0000000000000000",
              "docs": [
                " Darwinia's hard cap default `10_000_000_000 * 10^9`"
              ]
            },
            {
              "name": "TotalPower",
              "type": 4,
              "value": "0x00ca9a3b",
              "docs": [
                " Darwinia's staking vote default `1_000_000_000`"
              ]
            },
            {
              "name": "MaxNominations",
              "type": 4,
              "value": "0x10000000",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 275
          },
          "index": 9
        },
        {
          "name": "Offences",
          "storage": {
            "prefix": "Offences",
            "items": [
              {
                "name": "Reports",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 9,
                    "value": 276
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The primary structure that holds all offence records keyed by report identifiers."
                ]
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 277,
                    "value": 90
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A vector of reports of the same kind that happened at the same time slot."
                ]
              },
              {
                "name": "ReportsByKindIndex",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 34,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Enumerates all reports of a kind along with the time they happened.",
                  "",
                  " All reports are sorted by the time of offence.",
                  "",
                  " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                  " different types are not supported at the moment so we are doing the manual serialization."
                ]
              }
            ]
          },
          "calls": null,
          "events": {
            "type": 33
          },
          "constants": [

          ],
          "errors": null,
          "index": 10
        },
        {
          "name": "Historical",
          "storage": null,
          "calls": null,
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 11
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "items": [
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "Plain": 80
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "type": {
                  "Plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "type": {
                  "Plain": 278
                },
                "fallback": "0x00",
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "type": {
                  "Plain": 247
                },
                "fallback": "0x00",
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 280
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 285,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "type": 287
          },
          "events": {
            "type": 35
          },
          "constants": [

          ],
          "errors": {
            "type": 288
          },
          "index": 12
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "items": [
              {
                "name": "State",
                "modifier": "Default",
                "type": {
                  "Plain": 289
                },
                "fallback": "0x00",
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "type": {
                  "Plain": 290
                },
                "fallback": "0x00",
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "type": {
                  "Plain": 65
                },
                "fallback": "0x00",
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "type": {
                  "Plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 8,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": {
            "type": 292
          },
          "events": {
            "type": 36
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": "0xa0860100",
              "docs": [
                " Max Authorities in use"
              ]
            }
          ],
          "errors": {
            "type": 305
          },
          "index": 13
        },
        {
          "name": "Beefy",
          "storage": {
            "prefix": "Beefy",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "Plain": 306
                },
                "fallback": "0x00",
                "docs": [
                  " The current authorities set"
                ]
              },
              {
                "name": "ValidatorSetId",
                "modifier": "Default",
                "type": {
                  "Plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The current validator set id"
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "type": {
                  "Plain": 306
                },
                "fallback": "0x00",
                "docs": [
                  " Authorities set scheduled to be used with the next session"
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 27
        },
        {
          "name": "MessageGadget",
          "storage": {
            "prefix": "MessageGadget",
            "items": [
              {
                "name": "CommitmentContract",
                "modifier": "Default",
                "type": {
                  "Plain": 43
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 307
          },
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 30
        },
        {
          "name": "EcdsaAuthority",
          "storage": {
            "prefix": "EcdsaAuthority",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "Plain": 308
                },
                "fallback": "0x00",
                "docs": [
                  " The current active authorities."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "type": {
                  "Plain": 308
                },
                "fallback": "0x00",
                "docs": [
                  " The incoming authorities."
                ]
              },
              {
                "name": "Nonce",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The nonce of the current active authorities. AKA term/session/era."
                ]
              },
              {
                "name": "AuthoritiesChangeToSign",
                "modifier": "Optional",
                "type": {
                  "Plain": 310
                },
                "fallback": "0x00",
                "docs": [
                  " The authorities change waiting for signing."
                ]
              },
              {
                "name": "NewMessageRootToSign",
                "modifier": "Optional",
                "type": {
                  "Plain": 312
                },
                "fallback": "0x00",
                "docs": [
                  " The new message root waiting for signing."
                ]
              },
              {
                "name": "PreviousMessageRoot",
                "modifier": "Optional",
                "type": {
                  "Plain": 313
                },
                "fallback": "0x00",
                "docs": [
                  " Record the previous message root.",
                  "",
                  " Use for checking if the message root getter get the same message root as the previous one.",
                  " And if this is empty, it means the message root is require to be relayed."
                ]
              }
            ]
          },
          "calls": {
            "type": 314
          },
          "events": {
            "type": 41
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": "0x03000000",
              "docs": [
                " The maximum number of authorities."
              ]
            },
            {
              "name": "ChainId",
              "type": 10,
              "value": "0x083435",
              "docs": [
                " Chain's ID, which is using for constructing the message. (follow EIP-712 SPEC)"
              ]
            },
            {
              "name": "SignThreshold",
              "type": 108,
              "value": "0x0046c323",
              "docs": [
                " The signing threshold.",
                "",
                " Once `signatures_count / authorities_count >= threshold`, we say the message is trusted."
              ]
            },
            {
              "name": "SyncInterval",
              "type": 4,
              "value": "0x0a000000",
              "docs": [
                " The interval of checking the message root."
              ]
            },
            {
              "name": "MaxPendingPeriod",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " How long should we wait for the message root to be signed.",
                "",
                " If the collecting new message root signatures process takes more than",
                " `MaxPendingPeriod`, we will drop the root. And update the root with a new one."
              ]
            }
          ],
          "errors": {
            "type": 315
          },
          "index": 32
        },
        {
          "name": "ImOnline",
          "storage": {
            "prefix": "ImOnline",
            "items": [
              {
                "name": "HeartbeatAfter",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The block number after which it's ok to send heartbeats in the current",
                  " session.",
                  "",
                  " At the beginning of each session we set this to a value that should fall",
                  " roughly in the middle of the session duration. The idea is to first wait for",
                  " the validators to produce a block in the current session, so that the",
                  " heartbeat later on will not be necessary.",
                  "",
                  " This value will only be used as a fallback if we fail to get a proper session",
                  " progress estimate from `NextSessionRotation`, as those estimates should be",
                  " more accurate then the value we calculate for `HeartbeatAfter`."
                ]
              },
              {
                "name": "Keys",
                "modifier": "Default",
                "type": {
                  "Plain": 316
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of keys that may issue a heartbeat."
                ]
              },
              {
                "name": "ReceivedHeartbeats",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 65,
                    "value": 318
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to",
                  " `WrapperOpaque<BoundedOpaqueNetworkState>`."
                ]
              },
              {
                "name": "AuthoredBlocks",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 253,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                  " number of blocks authored by the given authority."
                ]
              }
            ]
          },
          "calls": {
            "type": 323
          },
          "events": {
            "type": 51
          },
          "constants": [
            {
              "name": "UnsignedPriority",
              "type": 8,
              "value": "0xffffffffffffffff",
              "docs": [
                " A configuration for base priority of unsigned transactions.",
                "",
                " This is exposed so that it can be tuned for particular runtime, when",
                " multiple pallets send unsigned transactions."
              ]
            }
          ],
          "errors": {
            "type": 331
          },
          "index": 14
        },
        {
          "name": "AuthorityDiscovery",
          "storage": null,
          "calls": null,
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 15
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 332
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": {
                  "Plain": 333
                },
                "fallback": "0x00",
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "type": 334
          },
          "events": {
            "type": 60
          },
          "constants": [
            {
              "name": "ProposalBond",
              "type": 102,
              "value": "0x50c30000",
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "type": 4,
              "value": "0x00460500",
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "type": 102,
              "value": "0x10270000",
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "type": 335,
              "value": "0x64612f7472737279",
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of approvals that can wait in the spending queue."
              ]
            }
          ],
          "errors": {
            "type": 336
          },
          "index": 24
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "items": [
              {
                "name": "Key",
                "modifier": "Default",
                "type": {
                  "Plain": 0
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "type": 337
          },
          "events": {
            "type": 61
          },
          "constants": [

          ],
          "errors": {
            "type": 374
          },
          "index": 16
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "items": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 375
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 10,
                    "value": 65
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Lookup from identity to the block number and index of the task."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "Plain": 381
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with last version."
                ]
              }
            ]
          },
          "calls": {
            "type": 339
          },
          "events": {
            "type": 64
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "type": 8,
              "value": "0x00806e8774010000",
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables of less",
                " priority than `schedule::HARD_DEADLINE`."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                " Not strictly enforced, but used for weight estimation."
              ]
            }
          ],
          "errors": {
            "type": 382
          },
          "index": 21
        },
        {
          "name": "BridgePangolinDispatch",
          "storage": null,
          "calls": null,
          "events": {
            "type": 67
          },
          "constants": [

          ],
          "errors": null,
          "index": 18
        },
        {
          "name": "BridgePangolinGrandpa",
          "storage": {
            "prefix": "BridgePangolinGrandpa",
            "items": [
              {
                "name": "RequestCount",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current number of requests which have written to storage.",
                  "",
                  " If the `RequestCount` hits `MaxRequests`, no more calls will be allowed to the pallet until",
                  " the request capacity is increased.",
                  "",
                  " The `RequestCount` is decreased by one at the beginning of every block. This is to ensure",
                  " that the pallet can always make progress."
                ]
              },
              {
                "name": "InitialHash",
                "modifier": "Default",
                "type": {
                  "Plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the header used to bootstrap the pallet."
                ]
              },
              {
                "name": "BestFinalized",
                "modifier": "Default",
                "type": {
                  "Plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the best finalized header."
                ]
              },
              {
                "name": "ImportedHashes",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 9
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A ring buffer of imported hashes. Ordered by the insertion time."
                ]
              },
              {
                "name": "ImportedHashesPointer",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Current ring buffer position."
                ]
              },
              {
                "name": "ImportedHeaders",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 140
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Headers which have been imported into the pallet."
                ]
              },
              {
                "name": "CurrentAuthoritySet",
                "modifier": "Default",
                "type": {
                  "Plain": 383
                },
                "fallback": "0x000000000000000000",
                "docs": [
                  " The current GRANDPA Authority set."
                ]
              },
              {
                "name": "PalletOwner",
                "modifier": "Optional",
                "type": {
                  "Plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Optional pallet owner.",
                  "",
                  " Pallet owner has a right to halt all pallet operations and then resume it. If it is",
                  " `None`, then there are no direct ways to halt/resume pallet operations, but other",
                  " runtime methods may still be used to do that (i.e. democracy::referendum to update halt",
                  " flag directly or call the `halt_operations`)."
                ]
              },
              {
                "name": "IsHalted",
                "modifier": "Default",
                "type": {
                  "Plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " If true, all pallet transactions are failed immediately."
                ]
              }
            ]
          },
          "calls": {
            "type": 341
          },
          "events": null,
          "constants": [
            {
              "name": "MaxRequests",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The upper bound on the number of requests allowed by the pallet.",
                "",
                " A request refers to an action which writes a header to storage.",
                "",
                " Once this bound is reached the pallet will not allow any dispatchables to be called",
                " until the request count has decreased."
              ]
            },
            {
              "name": "HeadersToKeep",
              "type": 4,
              "value": "0xc0890100",
              "docs": [
                " Maximal number of finalized headers to keep in the storage.",
                "",
                " The setting is there to prevent growing the on-chain state indefinitely. Note",
                " the setting does not relate to block numbers - we will simply keep as much items",
                " in the storage, so it doesn't guarantee any fixed timeframe for finality headers."
              ]
            }
          ],
          "errors": {
            "type": 384
          },
          "index": 19
        },
        {
          "name": "BridgePangolinMessages",
          "storage": {
            "prefix": "BridgePangolinMessages",
            "items": [
              {
                "name": "PalletOwner",
                "modifier": "Optional",
                "type": {
                  "Plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Optional pallet owner.",
                  "",
                  " Pallet owner has a right to halt all pallet operations and then resume it. If it is",
                  " `None`, then there are no direct ways to halt/resume pallet operations, but other",
                  " runtime methods may still be used to do that (i.e. democracy::referendum to update halt",
                  " flag directly or call the `halt_operations`)."
                ]
              },
              {
                "name": "PalletOperatingMode",
                "modifier": "Default",
                "type": {
                  "Plain": 348
                },
                "fallback": "0x00",
                "docs": [
                  " The current operating mode of the pallet.",
                  "",
                  " Depending on the mode either all, some, or no transactions will be allowed."
                ]
              },
              {
                "name": "InboundLanes",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 14,
                    "value": 385
                  }
                },
                "fallback": "0x000000000000000000",
                "docs": [
                  " Map of lane id => inbound lane data."
                ]
              },
              {
                "name": "OutboundLanes",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 14,
                    "value": 388
                  }
                },
                "fallback": "0x010000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of lane id => outbound lane data."
                ]
              },
              {
                "name": "OutboundMessages",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 389,
                    "value": 390
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All queued outbound messages."
                ]
              }
            ]
          },
          "calls": {
            "type": 347
          },
          "events": {
            "type": 72
          },
          "constants": [
            {
              "name": "BridgedChainId",
              "type": 14,
              "value": "0x7061676c",
              "docs": [
                " Gets the chain id value from the instance."
              ]
            }
          ],
          "errors": {
            "type": 391
          },
          "index": 17
        },
        {
          "name": "PangolinFeeMarket",
          "storage": {
            "prefix": "PangolinFeeMarket",
            "items": [
              {
                "name": "RelayersMap",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 392
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "Relayers",
                "modifier": "Default",
                "type": {
                  "Plain": 80
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "AssignedRelayers",
                "modifier": "Optional",
                "type": {
                  "Plain": 393
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "Orders",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 68,
                    "value": 394
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "CollateralSlashProtect",
                "modifier": "Optional",
                "type": {
                  "Plain": 6
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "AssignedRelayersNumber",
                "modifier": "Default",
                "type": {
                  "Plain": 4
                },
                "fallback": "0x03000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 357
          },
          "events": {
            "type": 78
          },
          "constants": [
            {
              "name": "TreasuryPalletId",
              "type": 335,
              "value": "0x64612f7472737279",
              "docs": [
                " Some reward goes to Treasury."
              ]
            },
            {
              "name": "LockId",
              "type": 123,
              "value": "0x64612f6665656c66",
              "docs": [

              ]
            },
            {
              "name": "MinimumRelayFee",
              "type": 6,
              "value": "0x00d6117e030000000000000000000000",
              "docs": [
                " The minimum fee for relaying."
              ]
            },
            {
              "name": "CollateralPerOrder",
              "type": 6,
              "value": "0x00743ba40b0000000000000000000000",
              "docs": [
                " The collateral relayer need to lock for each order.",
                "",
                " This also represents the maximum slash value for a single delayed order.",
                " Please note that if this value is set to zero the fee market will be suspended."
              ]
            },
            {
              "name": "Slot",
              "type": 4,
              "value": "0x2c010000",
              "docs": [
                " The slot times set"
              ]
            },
            {
              "name": "GuardRelayersRewardRatio",
              "type": 102,
              "value": "0x400d0300",
              "docs": [
                " Reward parameters"
              ]
            },
            {
              "name": "MessageRelayersRewardRatio",
              "type": 102,
              "value": "0x00350c00",
              "docs": [

              ]
            },
            {
              "name": "ConfirmRelayersRewardRatio",
              "type": 102,
              "value": "0x400d0300",
              "docs": [

              ]
            },
            {
              "name": "AssignedRelayerSlashRatio",
              "type": 102,
              "value": "0x400d0300",
              "docs": [
                " The slash ratio for assigned relayers."
              ]
            }
          ],
          "errors": {
            "type": 398
          },
          "index": 22
        },
        {
          "name": "TransactionPause",
          "storage": {
            "prefix": "TransactionPause",
            "items": [
              {
                "name": "PausedTransactions",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 110,
                    "value": 63
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The paused transaction map",
                  "",
                  " map (PalletNameBytes, FunctionNameBytes) => Option<()>"
                ]
              }
            ]
          },
          "calls": {
            "type": 358
          },
          "events": {
            "type": 87
          },
          "constants": [

          ],
          "errors": {
            "type": 399
          },
          "index": 23
        },
        {
          "name": "EVM",
          "storage": {
            "prefix": "EVM",
            "items": [
              {
                "name": "AccountCodes",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 43,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "AccountStorages",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat",
                      "Blake2128Concat"
                    ],
                    "key": 400,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 359
          },
          "events": {
            "type": 88
          },
          "constants": [

          ],
          "errors": {
            "type": 401
          },
          "index": 25
        },
        {
          "name": "Ethereum",
          "storage": {
            "prefix": "Ethereum",
            "items": [
              {
                "name": "Pending",
                "modifier": "Default",
                "type": {
                  "Plain": 402
                },
                "fallback": "0x00",
                "docs": [
                  " Current building block's transactions and receipts."
                ]
              },
              {
                "name": "CurrentBlock",
                "modifier": "Optional",
                "type": {
                  "Plain": 411
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum block."
                ]
              },
              {
                "name": "CurrentReceipts",
                "modifier": "Optional",
                "type": {
                  "Plain": 416
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum receipts."
                ]
              },
              {
                "name": "CurrentTransactionStatuses",
                "modifier": "Optional",
                "type": {
                  "Plain": 417
                },
                "fallback": "0x00",
                "docs": [
                  " The current transaction statuses."
                ]
              },
              {
                "name": "RemainingRingBalance",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Remaining ring balance for dvm account."
                ]
              },
              {
                "name": "RemainingKtonBalance",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Remaining kton balance for dvm account."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 99,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Mapping for block number and hashes."
                ]
              }
            ]
          },
          "calls": {
            "type": 363
          },
          "events": {
            "type": 91
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 335,
              "value": "0x6461722f64766d70",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 418
          },
          "index": 26
        },
        {
          "name": "BaseFee",
          "storage": {
            "prefix": "BaseFee",
            "items": [
              {
                "name": "BaseFeePerGas",
                "modifier": "Default",
                "type": {
                  "Plain": 99
                },
                "fallback": "0x00ca9a3b00000000000000000000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "IsActive",
                "modifier": "Default",
                "type": {
                  "Plain": 30
                },
                "fallback": "0x01",
                "docs": [

                ]
              },
              {
                "name": "Elasticity",
                "modifier": "Default",
                "type": {
                  "Plain": 102
                },
                "fallback": "0x48e80100",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 373
          },
          "events": {
            "type": 101
          },
          "constants": [

          ],
          "errors": null,
          "index": 31
        }
      ],
      "extrinsic": {
        "type": 419,
        "version": 4,
        "signedExtensions": [
          {
            "identifier": "CheckSpecVersion",
            "type": 421,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckTxVersion",
            "type": 422,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckGenesis",
            "type": 423,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckMortality",
            "type": 424,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckNonce",
            "type": 426,
            "additionalSigned": 63
          },
          {
            "identifier": "CheckWeight",
            "type": 427,
            "additionalSigned": 63
          },
          {
            "identifier": "ChargeTransactionPayment",
            "type": 428,
            "additionalSigned": 63
          }
        ]
      },
      "type": 430
    }
  }
}
